#!/usr/bin/env bash

: <<"TODO"

# Add a check to deactivate proxy to ensure a quick connection out of Tor else the git clone will fail.
# Add message before and after each step to announce it
# Add the optional choice to perform or not the steps.
# Add a choice to choose on which step to start the script.
# Add a dynamic list of git repo.
# Adapt exit error code

TODO

# Syntax :
# -

source functions_personal

#######################################################################
################### SET-UP BEFORE BACK-UP #############################
#######################################################################

# Set the list of all used directories for the back-up through their environment variable name
declare -a ARRAY_DIR_LIST_FOR_BACK_UP
ARRAY_DIR_LIST_FOR_BACK_UP+=("DIR_BACK_UP_PROFILES")
ARRAY_DIR_LIST_FOR_BACK_UP+=("DIR_BACK_UP_SYSTEM_CONFIG")
ARRAY_DIR_LIST_FOR_BACK_UP+=("DIR_BACK_UP_CHANNELS")
ARRAY_DIR_LIST_FOR_BACK_UP+=("DIR_BACK_UP_MANIFESTS")
ARRAY_DIR_LIST_FOR_BACK_UP+=("DIR_BACK_UP_PARTITION")
ARRAY_DIR_LIST_FOR_BACK_UP+=("REPERTOIRE_DEVELOPPEMENT")
ARRAY_DIR_LIST_FOR_BACK_UP+=("REPERTOIRE_TEMPORAIRE")

# Set the list of profile files to back-up through their environment variable name
declare -a ARRAY_ENV_VAR_PROFILES_FILES
ARRAY_ENV_VAR_PROFILES_FILES+=("BASH_PROFILE")
ARRAY_ENV_VAR_PROFILES_FILES+=("BASHRC")
ARRAY_ENV_VAR_PROFILES_FILES+=("EMACS_CONF")
ARRAY_ENV_VAR_PROFILES_FILES+=("GIT_CONF")
ARRAY_ENV_VAR_PROFILES_FILES+=("PROXYCHAINS_CONF")
ARRAY_ENV_VAR_PROFILES_FILES+=("RBW_CONF")

# Path for output file for back-up of external disks
SCRIPT_OUTPUT_FILE="${REPERTOIRE_TEMPORAIRE}/output.txt"
# Will enable the user to read the message before running a long command of back-up with external disk
PAUSE_BEFORE_RUN=5 

#######################################################################
################ CHECK OF SET-UP BEFORE BACK-UP #######################
#######################################################################

# Check that all back-up directories exist
for i in "${!ARRAY_DIR_LIST_FOR_BACK_UP[@]}"
do
    if [ ! -d "${!ARRAY_DIR_LIST_FOR_BACK_UP[$i]}" ]
    then
        # Exit with error else
	STDERR_show_message "\nERROR : the variable for the back-up directory \"${ARRAY_DIR_LIST_FOR_BACK_UP[$i]}\" is not correctly set. Currently, its value is \"${!ARRAY_DIR_LIST_FOR_BACK_UP[$i]}\" which is not a directory.\n"
        exit 1
    fi
done

#######################################################################
################### BACK UP OF MAIN FILES #############################
#######################################################################

# Back-up of profiles files
for i in "${!ARRAY_ENV_VAR_PROFILES_FILES[@]}"
do
    # Check that the file exists through its environment variable value
    if [ ! -f "${!ARRAY_ENV_VAR_PROFILES_FILES[$i]}" ]
    then
	# Exit with error else
	STDERR_show_message "\nERROR : The environment variable \"${ARRAY_ENV_VAR_PROFILES_FILES[$i]}\" is not correctly set. Currently, its value is \"${!ARRAY_ENV_VAR_PROFILES_FILES[$i]}\" which is not a file.\n"
	  exit 2
    fi

    # Back-up with confirmation of success / error through another script
    back_up_files_to_dir_with_timestamp -f  "${!ARRAY_ENV_VAR_PROFILES_FILES[$i]}" -d "$DIR_BACK_UP_PROFILES" ||
	exit 3

done

# Back-up of system configuration
# Check that the file exists
if [ ! -f "$GUIX_SYSTEM_CONF" ]
then
    # Exit with error else
    STDERR_show_message "\nERROR : The environment variable \"GUIX_SYSTEM_CONF\" is not correctly set. Currently, its value is \"$GUIX_SYSTEM_CONF\" which is not a file.\n"
      exit 4
else
# Back-up with confirmation of success / error through another script
back_up_files_to_dir_with_timestamp -f  "$GUIX_SYSTEM_CONF" -d "$DIR_BACK_UP_SYSTEM_CONFIG" ||
    exit 5
fi

# Back-up of channels configuration
# Check that the file exists
if [ ! -f "$GUIX_CHANNELS_CONF" ]
then
    # Exit with error else
    STDERR_show_message "\nERROR : The environment variable \"GUIX_CHANNELS_CONF\" is not correctly set. Currently, its value is \"$GUIX_CHANNELS_CONF\" which is not a file.\n"
      exit 6
else
# Back-up with confirmation of success / error through another script
back_up_files_to_dir_with_timestamp -f  "$GUIX_CHANNELS_CONF" -d "$DIR_BACK_UP_CHANNELS" ||
    exit 7
fi

# Back-up of current packages list
# Check if the file exists (it is a symlink) so not using '-f'
if [ ! -e "$GUIX_PACKAGES_INSTALLATION_PROFILE" ]
then
    # Exit with error else
    STDERR_show_message "\nERROR : The environment variable \"GUIX_PACKAGES_INSTALLATION_PROFILE\" is not correctly set. Currently, its value is \"$GUIX_PACKAGES_INSTALLATION_PROFILE\" which does not exist.\n"
      exit 8
else
    # Back-up with confirmation of success / error
    {  BACK_UP_MANIFEST_PATH="${DIR_BACK_UP_MANIFESTS}/$(timestamp_current)-manifest.scm" &&
	# Write a new file with the manifest of current packages.
	guix package -p "$GUIX_PACKAGES_INSTALLATION_PROFILE" --export-manifest > "$BACK_UP_MANIFEST_PATH" &&
      echo -e "\nOK - The manifest of current packages was saved under the path \"$BACK_UP_MANIFEST_PATH\".\n"
    }||
    { STDERR_show_message "\nERROR : The manifest of current packages could not be backed-up. Check script output and/or the back-up script.\n"
      exit 9
    }
fi

#######################################################################
############ BACK UP OF PARTITION AND FILESYSTEM ######################
#######################################################################

# Back-up of disk-partition, size and filesystem types

# 'lsblk' to get the list of partitions as well as their sizes.
COMMAND_TO_RUN="lsblk"
# Get a string without space to be used within the back-up filename
# Step useful if further evolution of the command
COMMAND_STRING_WITHOUT_SPACE="$(echo "$COMMAND_TO_RUN" | tr ' ' '_')"
# Back-up with confirmation of success / error
{  BACK_UP_PATH="${DIR_BACK_UP_PARTITION}/$(timestamp_current)_$COMMAND_STRING_WITHOUT_SPACE" &&
   # Write a new file with the partition.
   $COMMAND_TO_RUN > "$BACK_UP_PATH" &&
   echo -e "\nOK - The partition shown with the command '$COMMAND_TO_RUN' was saved under the path \"$BACK_UP_PATH\".\n"
}||
{ STDERR_show_message "\nERROR : The partition shown with the command '$COMMAND_TO_RUN' could not be backed-up. Check script output and/or the back-up script.\n"
  exit 10
}

# 'lsblk -f' to get the filesystem types of the partitions    
COMMAND_TO_RUN="lsblk -f"
# Get a string without space to be used within the back-up filename
COMMAND_STRING_WITHOUT_SPACE="$(echo "$COMMAND_TO_RUN" | tr ' ' '_')"
# Back-up with confirmation of success / error
{  BACK_UP_PATH="${DIR_BACK_UP_PARTITION}/$(timestamp_current)_$COMMAND_STRING_WITHOUT_SPACE" &&
   # Write a new file with the partition.
   $COMMAND_TO_RUN > "$BACK_UP_PATH" &&
   echo -e "\nOK - The partition shown with the command '$COMMAND_TO_RUN' was saved under the path \"$BACK_UP_PATH\".\n"
}||
{ STDERR_show_message "\nERROR : The partition shown with the command '$COMMAND_TO_RUN' could not be backed-up. Check script output and/or the back-up script.\n"
  exit 11
}

#######################################################################
####### BACK UP OF CONTENT OF $HOME SUBDIRECTORIES ####################
#######################################################################

# Warning for user to check the content of the directories under $HOME to back-up if required.
# Add main $HOME sub-directories within an array
declare -a ARRAY_OF_BASENAME_OF_DIRECTORIES_UNDER_HOME
ARRAY_OF_BASENAME_OF_DIRECTORIES_UNDER_HOME+=("Desktop")
ARRAY_OF_BASENAME_OF_DIRECTORIES_UNDER_HOME+=("Documents")
ARRAY_OF_BASENAME_OF_DIRECTORIES_UNDER_HOME+=("Downloads")
ARRAY_OF_BASENAME_OF_DIRECTORIES_UNDER_HOME+=("Music")
ARRAY_OF_BASENAME_OF_DIRECTORIES_UNDER_HOME+=("Pictures")
ARRAY_OF_BASENAME_OF_DIRECTORIES_UNDER_HOME+=("Public")
ARRAY_OF_BASENAME_OF_DIRECTORIES_UNDER_HOME+=("Templates")
ARRAY_OF_BASENAME_OF_DIRECTORIES_UNDER_HOME+=("Videos")
ARRAY_OF_BASENAME_OF_DIRECTORIES_UNDER_HOME+=("Wallpapers")

# Loop on them
for EACH_BASENAME in "${ARRAY_OF_BASENAME_OF_DIRECTORIES_UNDER_HOME[@]}"
do
    DIRECTORY_PATH="${HOME}/${EACH_BASENAME}"
    # Test if they exists on current OS, if so, adapt the string that will be used in the message below
    if [ -d "$DIRECTORY_PATH" ]
    then
	STRING_OF_DIRECTORIES_TO_CHECK="${STRING_OF_DIRECTORIES_TO_CHECK}
    - $EACH_BASENAME (located \"$DIRECTORY_PATH\")"
    fi
done

# Show the message for the user to require the manual back-up of those directories content
read -p "TO DO :
1. Control the content of the directories under \$HOME.
2. Save all important files within the git directories.

For example, a non-exaustive list of those directories :
$STRING_OF_DIRECTORIES_TO_CHECK

Please confirm when done by typing 'enter'.
" 

#######################################################################
############ BACK UP OF DEVELOPMENT GIT REPO ##########################
#######################################################################

# Get all my personal git directories within an array
declare -a ARRAY_OF_GIT_DIRECTORIES
ARRAY_OF_GIT_DIRECTORIES=($(find "$REPERTOIRE_DEVELOPPEMENT" -maxdepth 1 -mindepth 1))
# Sort the directories
declare -a SORTED_ARRAY_OF_GIT_DIRECTORIES
tableau_trier_ordre_alphabetique_pas_numero ARRAY_OF_GIT_DIRECTORIES SORTED_ARRAY_OF_GIT_DIRECTORIES

# Loop on them to create a pretty string for the next message
for EACH_GIT_DIRECTORY in "${SORTED_ARRAY_OF_GIT_DIRECTORIES[@]}"
do
    EACH_GIT_DIRECTORY_BASENAME="${EACH_GIT_DIRECTORY##*/}"
    STRING_OF_GIT_DIRECTORIES="${STRING_OF_GIT_DIRECTORIES}
    - $EACH_GIT_DIRECTORY_BASENAME (located \"$EACH_GIT_DIRECTORY\")"
done

# Show the message for the user to require to save current development environment (if wished).
read -p "TO DO :
1. Save current development environment content of the git directories.

List of those directories :
$STRING_OF_GIT_DIRECTORIES

Please confirm when done by typing 'enter'.
" 

# Force commit and/or push all personal git repo through another script
# And process the exit if any error occurs.
git_force_update_all || exit 12

# Remove all git dirs locally.
# Print warning message
echo -e "\nWARNING : the next step consists in removing all personal git directories.\n"
# Ask for confirmation with possibility to exit before continuing
ask_user_if_agree_to_continue
# Remove all git directory with error management.
{ rm -rf "$REPERTOIRE_DEVELOPPEMENT"/* &&
  echo -e "\nOK : the directory \"$REPERTOIRE_DEVELOPPEMENT\" was emptied !\n"
} ||
{ STDERR_show_message "\nERROR : the directory \"$REPERTOIRE_DEVELOPPEMENT\" could not be emptied. \nPlease do it manually or check the script.\n"
  cd "$OLDPWD"
  exit 13
}

# Manage git personal token from git userspace
read -p "TO DO :
1. Remove current personal token from git userspace.
2. Create personal token from git userspace.
3. Note it into a file (or piece of paper) JUST IN CASE.

Please type 'enter' when done.
" 

MESSAGE_FOR_NEW_GIT_PERSONAL_TOKEN="TO DO :
1. Copy/paste the new token below.

NEW TOKEN : "
read -p "$MESSAGE_FOR_NEW_GIT_PERSONAL_TOKEN" NEW_GIT_PERSONAL_TOKEN

# Set here all git personal repo name to be re-cloned into the new env.
declare -a ARRAY_LIST_OF_GIT_MAIN_DIRECTORIES_TO_BE_RECLONED
ARRAY_LIST_OF_GIT_MAIN_DIRECTORIES_TO_BE_RECLONED+=("administratif")
ARRAY_LIST_OF_GIT_MAIN_DIRECTORIES_TO_BE_RECLONED+=("bash")
ARRAY_LIST_OF_GIT_MAIN_DIRECTORIES_TO_BE_RECLONED+=("c_training")
ARRAY_LIST_OF_GIT_MAIN_DIRECTORIES_TO_BE_RECLONED+=("guix-custom-channel")
ARRAY_LIST_OF_GIT_MAIN_DIRECTORIES_TO_BE_RECLONED+=("l2l")
ARRAY_LIST_OF_GIT_MAIN_DIRECTORIES_TO_BE_RECLONED+=("os_config")

# Move into the personal git directory
cd "$REPERTOIRE_DEVELOPPEMENT"

# Clone all git directory
for EACH_MAIN_GIT_REPO in "${ARRAY_LIST_OF_GIT_MAIN_DIRECTORIES_TO_BE_RECLONED[@]}"
do
    URL_OF_ORIGIN_OF_REPO="https://${NEW_GIT_PERSONAL_TOKEN}@github.com/Pablo12345678901/${EACH_MAIN_GIT_REPO}.git"
    { git clone "$URL_OF_ORIGIN_OF_REPO" &&
      echo -e "\nOK : git repo \"$EACH_MAIN_GIT_REPO\" cloned within the directory \"$REPERTOIRE_DEVELOPPEMENT\" !\n"
    } ||
    { STDERR_show_message "\nERROR : the git repo \"$EACH_MAIN_GIT_REPO\" could not be correctly cloned within the directory \"$REPERTOIRE_DEVELOPPEMENT\". \nPlease do it manually or check the script.\n"
      cd "$OLDPWD"
      exit 14
    }
done

# Return to previous directory
cd "$OLDPWD"

#######################################################################
################## PURGE OF RBW DATABASE ##############################
#######################################################################

# Purge local Bitwarden database (tool 'rbw')
{ rbw purge &&
  echo -e "\nOK : The local Bitwarden database was sucessfully purged.\n"
} ||
{    STDERR_show_message "\nERROR : The local Bitwarden database could not be purged. Check script output and/or do it manually...\n"
     exit 15
}

#######################################################################
############ BACK-UP OF GIT DIRS TO MAIN EXTERNAL DISK ################
#######################################################################

# Check whether the main external disk is connected (if its variable is well defined
if  [ ! -d "$USB_MAIN_EXTERNAL_DRIVE" ]
then
    STDERR_show_message "\nERROR : the external usb disk defined within the environment variable \"USB_SECONDARY_EXTERNAL_DRIVE\" is not correctly defined or is not a directory (maybe it is not connected). \nCurrently, its value is \"$USB_SECONDARY_EXTERNAL_DRIVE\"\n"
    exit 16
fi

# Check that the back-up directory for git repos exists within the external drive
if [ ! -d "${BACK_UP_GIT_DIR_WITHIN_USB_MAIN_EXTERNAL_DRIVE}" ]
then
    STDERR_show_message "\nERROR : the environment variable \"BACK_UP_GIT_DIR_WITHIN_USB_MAIN_EXTERNAL_DRIVE\" is not correctly defined or is not a directory. \nCurrently, its value is \"$BACK_UP_GIT_DIR_WITHIN_USB_MAIN_EXTERNAL_DRIVE\"\n"
    exit 17
fi

# Create a back-up directory with timestamp
NEW_GIT_DIRECTORY_WITH_TIMESTAMP_FOR_BACK_UP="${BACK_UP_GIT_DIR_WITHIN_USB_MAIN_EXTERNAL_DRIVE}/$(timestamp_current)"
{ mkdir "${NEW_GIT_DIRECTORY_WITH_TIMESTAMP_FOR_BACK_UP}" &&
  echo -e "\nNew back-up directory for git repos was created within the main external disk at the path : \"$NEW_GIT_DIRECTORY_WITH_TIMESTAMP_FOR_BACK_UP\".\n"
} ||
{ STDERR_show_message "\nERROR : the back-up directory for git repos could not be created within the main external disk. \nPlease check script output and/or script...\n"
  exit 18
}

# Set here all git personal repo name to be re-cloned into the new env.
declare -a ARRAY_LIST_OF_GIT_MAIN_DIRECTORIES_TO_BE_BACKED_UP
ARRAY_LIST_OF_GIT_MAIN_DIRECTORIES_TO_BE_BACKED_UP+=("administratif")
ARRAY_LIST_OF_GIT_MAIN_DIRECTORIES_TO_BE_BACKED_UP+=("bash")
ARRAY_LIST_OF_GIT_MAIN_DIRECTORIES_TO_BE_BACKED_UP+=("c_training")
ARRAY_LIST_OF_GIT_MAIN_DIRECTORIES_TO_BE_BACKED_UP+=("guix-custom-channel")
ARRAY_LIST_OF_GIT_MAIN_DIRECTORIES_TO_BE_BACKED_UP+=("l2l")
ARRAY_LIST_OF_GIT_MAIN_DIRECTORIES_TO_BE_BACKED_UP+=("os_config")

# Move into the external disk back-up git directory
cd "$NEW_GIT_DIRECTORY_WITH_TIMESTAMP_FOR_BACK_UP"

# Clone all git directory
for EACH_GIT_REPO_NEEDING_BACK_UP in "${ARRAY_LIST_OF_GIT_MAIN_DIRECTORIES_TO_BE_BACKED_UP[@]}"
do
    URL_OF_ORIGIN_OF_REPO="https://${NEW_GIT_PERSONAL_TOKEN}@github.com/Pablo12345678901/${EACH_GIT_REPO_NEEDING_BACK_UP}.git"
    { git clone "$URL_OF_ORIGIN_OF_REPO" &&
      echo -e "\nOK : git repo \"$EACH_GIT_REPO_NEEDING_BACK_UP\" backed-up within the directory \"$NEW_GIT_DIRECTORY_WITH_TIMESTAMP_FOR_BACK_UP\" !\n"
    } ||
    { STDERR_show_message "\nERROR : the git repo \"$EACH_GIT_REPO_NEEDING_BACK_UP\" could not be correctly backed-up within the directory \"$NEW_GIT_DIRECTORY_WITH_TIMESTAMP_FOR_BACK_UP\". \nPlease do it manually or check the script.\n"
      cd "$OLDPWD"
      exit 19
    }
done

# Return to previous directory
cd "$OLDPWD"

#######################################################################
########## BACK-UP OF MAIN TO SECONDARY EXTERNAL DISKS ################
#######################################################################

# Ask the user to connect the external secondary disk 
read -p "TO DO :
1. Connect external secondary disk.
2. Check with lsblk that it is well connected..

Please type 'enter' when done.
"

# Check whether the secondary external disk is connected (if its variable is well defined
if [ ! -d "$USB_SECONDARY_EXTERNAL_DRIVE" ]
then
    echo "ERROR : the external usb disk defined within the environment variable \"USB_SECONDARY_EXTERNAL_DRIVE\" is not correctly defined or is not a directory (maybe it is not connected). \nCurrently, its value is \"$USB_SECONDARY_EXTERNAL_DRIVE\"\n"
    exit 20
fi

# Back-up of main external disk to secondary one
COMMAND="sudo back_up_a_dir_to_another -s ${USB_MAIN_EXTERNAL_DRIVE}/ -d ${USB_SECONDARY_EXTERNAL_DRIVE} "

# Show the current step
echo -e "\nBacking-up the main external disk to the secondary one...\n" &&
# Pause X seconds to let the user read the message
sleep $PAUSE_BEFORE_RUN

# Remove content if file existing
echo -n "" > "$SCRIPT_OUTPUT_FILE"

# Back-up
{ $COMMAND &&
      echo "OK - COMMAND \"$COMMAND\"" >> "$SCRIPT_OUTPUT_FILE"
} || echo "ERROR - COMMAND \"$COMMAND\"" >> "$SCRIPT_OUTPUT_FILE"
echo -e "\n\n" >> "$SCRIPT_OUTPUT_FILE" # Esthetic

# Showing the results
echo -e "\nBack-up of external disks finished - Please check the results.\n"
file_open -f "$SCRIPT_OUTPUT_FILE"

