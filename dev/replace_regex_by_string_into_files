#!/usr/bin/env bash

source fonctions_personnelles

declare -a TABLEAU_FICHIERS

# TO DEV :
# 4. RESOLVE THE SHOWING OF CHAR '\' AS IN \n' :
#        COMMAND RUNNED :
#        ./remplacer_mot_dans_fichier -r 'ERREUR' -s 'ERROR' -d .
#        OUTPUT EXAMPLE :
#        19	    { STDERR_afficher_message "nERREUR  l'installation de "$APP_BLUETOOTH" a échouée.n"
# 3. RESTRUCTURE CODE
# 4. IF POSSIBLE, REWRITE IN ENGLISH
# 5. SAME FOR : SCRIPTS : repertoire_recherche_regex & string_recherche_sous_string_echo_index_ou_moins_un

# DEBUG SYNTAX

# Syntaxe :
# - : aucun argument requis.

source fonctions_personnelles

# Syntaxe
SYNTAXE="$(syntaxe_afficher_si_erreur "$(basename $0)" "-r REGEX_RECHERCHE" "-s STRING_REMPLACEMENT" "-d FICHIER_OU_REPERTOIRE" "[...]")"

# Set the file which will contain the output of some commands of the script
# That enables it to stock and recover data from it for further use.
NOM_FICHIER_OUTPUT_CORBEILLE="$(basename $0)_output.txt"
PATH_FICHIER_OUTPUT_CORBEILLE="${CORBEILLE_PATH}/${NOM_FICHIER_OUTPUT_CORBEILLE}"

# Declare files array here because will be needed after
declare -a TABLEAU_FICHIERS

####### BEGINNING OF OPTION MANAGEMENT ##########

# Note that we use "$@" to let each command-line parameter expand to a
# separate word. The quotes around "$@" are essential!
# We need TEMP as the 'eval set --' would nuke the return value of getopt.
TEMP=$(getopt --options 'r:s:d:' -q -- "$@")
# -q : quiet
# -- : to explicitly show the options end

# Test whether syntax was correct (options + arguments)
if [ $? -ne 0 ]
then
    STDERR_afficher_message "ERROR: syntax..."
    STDERR_afficher_message "$SYNTAXE"
    exit 1
fi

# Arguments check
FLAG_OPTION_D=
FLAG_OPTION_R=
FLAG_OPTION_S=

# Re-set options through positional parameters
eval set -- "$TEMP"
unset TEMP

while true; do
    case "$1" in
	-d )  
	    FLAG_OPTION_D=1
            FILE_PROVIDED="$2"
            shift 2
            # Add to dir array
	    # Test if the file provided is really a file or a directory - exit with error else
	    if [ -d "$FILE_PROVIDED" ] || [ -f "$FILE_PROVIDED" ]
            then
		# Test if it is a directory
                if [ -d "$FILE_PROVIDED" ]
                then
		    # Get the path whether it is absolute or relative
		    FILE_PROVIDED="$(readlink --canonicalize $FILE_PROVIDED)"
		    # Fill array with all files contained in the directory
                    repertoire_remplissage_tableau_avec_fichier_sauf_certaines_exceptions_recherche_triee_avec_find TABLEAU_FICHIERS "$FILE_PROVIDED"
                else
		    # Else, it is a file so add it to the array.
		    # 'readlink --canonicalize' : follow all the symlink and therefore support relative path as well as absolute ones
		    FILE_PROVIDED="$(readlink --canonicalize "${FILE_PROVIDED}")"
                    TABLEAU_FICHIERS+=("$FILE_PROVIDED")
                fi
            else
                STDERR_afficher_message "\nERROR : the provided argument to '-d' = \"$FILE_PROVIDED\" is neither a file nor a directory.\n"
                STDERR_afficher_message "$SYNTAXE"
                exit 1 
            fi
	    continue
            ;;
	-r )  
	    FLAG_OPTION_R=1
            REGEX_RECHERCHE="$2"
            shift 2
            continue
            ;;
	-s )  
	    FLAG_OPTION_S=1
            STRING_REMPLACEMENT="$2"
            shift 2
            continue
            ;;
       	'--')
	    shift
	    break
      	    ;;
        * )
	    # Error management for all other bugs
            STDERR_afficher_message "ERROR: internal error...\n"
            STDERR_afficher_message "$SYNTAXE"
            exit 2
            ;;
	esac
done

# Test whether other arguments were provided = in excess (=test if $1 is defined)
if [ ! -z "$1" ]
then
    STDERR_afficher_message "\nERROR : argument(s) in excess : \"$*\".\n"
    STDERR_afficher_message "$SYNTAXE"
    exit 3
fi

# Test if the REQUEST_USER_AGREEMENT_TO_CONTINUE option was not provided
if [ -z "$FLAG_OPTION_D" ] || [ -z "$FLAG_OPTION_R" ] || [ -z "$FLAG_OPTION_S" ]
then
    STDERR_afficher_message "\nERROR : Please provide all required argument(s).\n"
    STDERR_afficher_message "$SYNTAXE"
    exit 3
fi

########## END OF OPTION MANAGEMENT ####################

# Get all matches in a string separating each of them with ':'
for FICHIER_UN_PAR_UN in "${TABLEAU_FICHIERS[@]}"
do
    LISTE_FICHIERS+="$(echo -n ":$FICHIER_UN_PAR_UN")"
done

# Conservation des lignes qui :
#   - ne sont pas uniquement composéees de commentaires
#   - match un mot recherché
#   - le mot recherché n'est pas dans un commentaire en fin de ligne

# Gestion du regex qui doit matcher les mauvaises lignes avec match QUE dans un commentaire
REGEX_SYMBOLE_COMMENTAIRE="#" # à adapter si changement de langage (exemple : 'C' )
REGEX_LIGNE_UNIQUEMENT_COMMENTAIRE='^[[:space:]]{2}[1-9]{1}[0-9]*[[:space:]]*[.'"$REGEX_SYMBOLE_COMMENTAIRE"'.]+.*$' # contient
# ^ et $ : début et fin de ligne
# \t : contient des tabulation selon le format défini par l'autre script : 2_TAB NUM_LIGNE>0 1_TAB CONTENU_LIGNE
# [1-9] et [0-9] match un de ces nombres
# {1} : match exactement 1x
# * match 0 ou plusieurs fois (0 - infini)
# + : match 1 ou plusieurs fois
# . : n'importe quel char
# [.X.] : ne doit pas être ce string

# Indicateurs pour affichage après avoir supprimé les fichiers sans lignes et répertoires sans fichiers
FLAG_ESPACE_AU_TOUT_DEBUT="true"
FLAG_AFFICHAGE_REPERTOIRE="false"
FLAG_AFFICHAGE_FICHIER="false"
FLAG_AFFICHAGE_LIGNE="false"
# Variable de conservation des valeurs pour affichage plus tard
CONSERVATION_REPERTOIRE=""
CONSERVATION_FICHIER=""
CONSERVATION_LIGNE=""
# Mémorisation du dernier élément pr affiché que si différent du précédent
DERNIER_REPERTOIRE_AFFICHE=""
DERNIER_FICHIER_AFFICHE=""

# Filter data between 4 lines type
# 'read -r' avoid letting '\' acting as escape chars
while read -r LIGNE_FILTREE
do    
    # 4 types de lignes :
    #   REPERTOIRE
    #   FICHIER
    #   LIGNE
    #   VIDE
    # Ces 4 types ont été mis juste avant la mise séparés par ':'
    # Récupération du type de la ligne
    TYPE_LIGNE_FILTREE="${LIGNE_FILTREE%%:*}" # récupération du type avec avoir coupé le plus long morceau possédant un ':' depuis la droite
    LIGNE_FILTREE="${LIGNE_FILTREE#$TYPE_LIGNE_FILTREE:}" # récupération de la ligne avec avoir coupé le type (et ':') depuis la gauche
    # Adaptation des flags selon le type de ligne rencontré
    # Raisonnement sur l'algorithme utilisé
    #   Une première ligne vide est imprimée avant tout autre chose et ce dès qu'une ligne (avec numéro) a été détectée.
    #   Le répertoire du match courant est conservé mais son flag d'affichage n'est activé que s'il est différent du précédent répertoire affiché.
    #   Dans tous les cas le répertoire n'est affiché que si une ligne après celui-ci a été détectée.
    #   Le fichier du match courant est conservé mais son flag d'affichage n'est activé que s'il est différent du précédent fichier affiché.
    #   Dans tous les cas le fichier n'est affiché que si une ligne après celui-ci a été détectée.
    #   Aussitôt qu'une nouvelle ligne est détectée, le flag d'affichage s'active. L'affichage (du répertoire et/ou fichier dépendra de leurs flags individuels.
    #   Dans tous les cas, la ligne sera affichée après un éventuel affichage de répertoire et/ou fichier.
    #   Finalement, les lignes vides déclenchent un print vide (print ligne vide) que si le flag d'une ligne détectée est activée.
    #   Ensuite, ce flag est désactivé et sera réactivé à la prochaine rencontre d'une ligne avec numéro.
    case "$TYPE_LIGNE_FILTREE" in
    "REPERTOIRE" )      CONSERVATION_REPERTOIRE="$LIGNE_FILTREE"
                        if [ "$CONSERVATION_REPERTOIRE" != "$DERNIER_REPERTOIRE_AFFICHE" ]
                        then
                            FLAG_AFFICHAGE_REPERTOIRE="true"
                        else
                            :
                        fi
                        ;;
    "FICHIER" )         CONSERVATION_FICHIER="$LIGNE_FILTREE"
                        if [ "$CONSERVATION_FICHIER" != "$DERNIER_FICHIER_AFFICHE" ]
                        then
                            FLAG_AFFICHAGE_FICHIER="true"
                        else
                            :
                        fi
                        ;;
    "LIGNE" )           CONSERVATION_LIGNE="$LIGNE_FILTREE"
                        FLAG_AFFICHAGE_LIGNE="true"
                        ;;
    # Une ligne vide est ignoré sauf si l'indicateur de ligne dit "true" (une ligne était là avant) - donc l'espace vide est important pour délimiter la fin du fichier.
    "VIDE" )            if [ $FLAG_ESPACE_AU_TOUT_DEBUT = "true" ]
                        then
                            echo "" # impression d'un espace avant l'output pour être plus esthétique.
                            FLAG_ESPACE_AU_TOUT_DEBUT="false"
                        else # après avoir imprimé le premier espace, on sera toujours ici
                            # affichage d'un espace de fin après avoir listé toutes les lignes du fichier concerné - ce pour chaque fichier
                            # affichage d'un espace que si précédé d'une ligne -> si plusieurs espaces à la suite, les suivants seront ignorés
                            if [ $FLAG_AFFICHAGE_LIGNE = "true" ]
                            then
                                echo ""
                                FLAG_AFFICHAGE_LIGNE="false"
                            else
                                :
                            fi
                        fi
                        ;;
    esac
    # Utilisation des flags pour un affichage dynamique :
    if [ $FLAG_AFFICHAGE_LIGNE = "true" ]
    then
        if [ $FLAG_AFFICHAGE_REPERTOIRE = "true" ]
        then
            # affichage du répertoire avec un espace
            echo "$CONSERVATION_REPERTOIRE"
            echo ""
            # et mise à jour du dernier répertoire affiché
            DERNIER_REPERTOIRE_AFFICHE="$CONSERVATION_REPERTOIRE" 
            # remise du flag à false
            FLAG_AFFICHAGE_REPERTOIRE="false"
        else
            :
        fi
        #
        if [ $FLAG_AFFICHAGE_FICHIER = "true" ]
        then
            # affichage du fichier avec un espace et remise du flag à false
            echo "$CONSERVATION_FICHIER"
            echo ""
            # et mise à jour du dernier fichier affiché
            DERNIER_FICHIER_AFFICHE="$CONSERVATION_FICHIER" 
            # remise du flag à false
            FLAG_AFFICHAGE_FICHIER="false"
        else
            :
        fi
        # Et après l'éventuel répertoire et fichier -> affichage du contenu de la ligne
        echo -E "$CONSERVATION_LIGNE"
    else
        : # pas d'affichage si le déclencheur minimum (une ligne avec num) n'est pas présente.
    fi
    # read -r : do not allow backslash char to escape any char
done < <( while read -r LIGNE
          do  
            BESOIN_CHECK="false"
            case "$LIGNE" in
            '/'* )      echo -e "REPERTOIRE:$LIGNE" ;; # if starts by '/'
            [^1-9]* )   echo -e "FICHIER:\t$LIGNE" ;; # if start exactly by 1x tab -> show with 1x tab
            [1-9]* )    BESOIN_CHECK="true" ;; # if starts by the line number
            * )         echo -e "VIDE:$LIGNE" ;; # if empty line -> show as is
            esac

            if [ $BESOIN_CHECK = "true" ]
            then
		# Have to use 'echo -E' in order to avoid the '\' acting as special chars
                NUM_LIGNE=$(echo -E "$LIGNE" | awk ' {print $1} ') # affiche le numéro de lignes
                CONTENU_LIGNE="$(sed -e "s/\t//" <(echo -E "${LIGNE#$NUM_LIGNE}"))" # coupe le numéro de ligne + la tabulation qui suit
                # Conservation que des lignes contenant un match qui est avant un commentaire.
                # Donc suppression des lignes contenant un match UNIQUEMENT dans un commentaire.

		# DEBUG REPLACE PATH AFTER DEV
                INDEX_SYMBOLE_COMMENTAIRE=$(./string_recherche_sous_string_echo_index_ou_moins_un " $REGEX_SYMBOLE_COMMENTAIRE" "$CONTENU_LIGNE") # un commentaire est débute par 'espace #'
		
                if [ $((INDEX_SYMBOLE_COMMENTAIRE)) -ge 0 ] # si l'index est >=0 ça veut dire qu'il y a eu un match d'un symbole de commentaire
                then
		    
		    # DEBUG REPLACE PATH AFTER DEV
                    INDEX_REGEX_RECHERCHE=$(./string_recherche_sous_string_echo_index_ou_moins_un "$REGEX_RECHERCHE" "$CONTENU_LIGNE")
		    
                    # If index is lower, it means that it arrives before the line end
                    if [ $INDEX_REGEX_RECHERCHE -lt $INDEX_SYMBOLE_COMMENTAIRE ] 
                    then
			# Print the line but preserve the '\'
                        # Show the line with two tabs and no newline
                        echo -e -n "LIGNE:\t\t"
			# Followed immediatly by the line content with preseveration of '\' (echo -E)
			echo -E "$LIGNE"
                    fi

                else
		    # Print the line but preserve the '\'
		    # Show the line with two tabs and no newline
		    echo -e -n "LIGNE:\t\t"
		    # Followed immediatly by the line content with preseveration of '\' (echo -E)
		    echo -E "$LIGNE"
                fi
            fi
            # La fonction ci-dessous appelle le script d'affichage des résultats = les lignes qui match le REGEX - non filtrées par rapport aux commentaires

	    # DEBUG REPLACE PATH AFTER DEV
	done < <( ./repertoire_recherche_regex -r "$REGEX_RECHERCHE" -l "$LISTE_FICHIERS" -s |
    # '-s' pour silencieux : sans les messages
    # Affichage BRUT des répertoires,
    #   TAB fichiers
    #       TAB TAB numéro_de_ligne TAB contenu
    # Suppression des mauvaises lignes composée UNIQUEMENT d'un commentaire (100% commentaire)
    grep -E -v "$REGEX_LIGNE_UNIQUEMENT_COMMENTAIRE" ) ) |
    # grep -E : extended regex
    # grep -n : chaque output est précédé du numéro de lignes. Ligne de début = 1. Le compteur recommencer à chaque fichier.
    # grep -v : affiche les lignes qui ne matchent pas.
    tee "$PATH_FICHIER_OUTPUT_CORBEILLE" # double parethèse car après filtrage des lignes correcte, il faut vérifier si chaque répertoire contient au moins un fichier et si chaque fichier contient au moins une ligne avant de l'afficher.
    # envoi d'un doublon vers la corbeille car il se peut que s'il y a trop de match, il soient tronqués à l'écran.
# Message indiquant qu'une copie de l'output a été placé dans la corbeille.
echo -e "\nLes fichiers concernés et les matchs ont été affichés ci-dessus. Une copie de l'output a été placée dans la corbeille sous le nom de \"$NOM_FICHIER_OUTPUT_CORBEILLE\".\n"

#######################
REPONSE_LESS=""
QUESTION_LESS="Voudriez-vous consulter cet output avec less ? (YyOo/Nn) "
question_oui_non REPONSE_LESS "$QUESTION_LESS"
if [ "$REPONSE_LESS" = 'o' ]
then
    less $PATH_FICHIER_OUTPUT_CORBEILLE
else
    :
fi

# Sécurité car remplacement violent
declare -a TABLEAU_OPTIONS
OPTION_1="Validez tous les remplacements"
OPTIONS_2="Contrôler fichier par fichier"
TABLEAU_OPTIONS+=("$OPTION_1")
TABLEAU_OPTIONS+=("$OPTIONS_2")
CHOIX_SELECTIONNE=""
MESSAGE_AFFICHE="\nQue décidez-vous pour la suite ? "
OPTION_POUR_ARRETER="Quitter"
select_parmi_liste TABLEAU_OPTIONS CHOIX_SELECTIONNE "$MESSAGE_AFFICHE" "$OPTION_POUR_ARRETER"
if [ "$CHOIX_SELECTIONNE" = "$OPTION_POUR_ARRETER" ]
then
    echo -e "\nVous décidez d'annuler le remplacement.\n"
    exit 0
else
    echo -e "\nVous avez choisi \"$CHOIX_SELECTIONNE\".\n"
    if [ "$CHOIX_SELECTIONNE" = "$OPTION_1" ] # validation massive
    then
        # Choix fait : modification de tous les fichiers et match -> lancer
        # Récupération des données : elles sont déjà nettoyées il ne reste plus qu'à récupérer les éléments pour le remplacement.
        # récupérer les data du fichier dans la corbeille
        REPERTOIRE_COURANT=""
        FICHIER_COURANT=""
        PATH_COURANT=""
        LIGNE_COURANTE=""
        NUMERO_LIGNE_COURANTE=""
        # Flag pr ne pas run la commande sur les première lignes dans lesquelles il n'y a pas de répertoire/fichier/ligne (num) disponible.
        FLAG_DONNEES_PR_REMPLACEMENT_COMPLETE="false" 
        while read LIGNE_FINALE
        do
            case "$LIGNE_FINALE" in
            '/'* )          REPERTOIRE_COURANT="$LIGNE_FINALE"
                            continue # REPERTOIRE mais pas encore ligne : passer à la boucle (ligne) suivante sans rien afficher
                            ;; # si débute par '/'

            [^1-9]* )       FICHIER_COURANT="$LIGNE_FINALE"
                            PATH_COURANT="${REPERTOIRE_COURANT}/${FICHIER_COURANT}"
                            continue # FICHIER mais pas encore ligne : passer à la boucle (ligne) suivante sans rien afficher
                            ;; # si débute par exactement 1x tab -> affichage avec 1x tab
            [1-9]* )        LIGNE_COURANTE="$LIGNE_FINALE"
                            NUMERO_LIGNE_COURANTE="$(echo "$LIGNE_COURANTE" | awk ' { print $1 } ' )"
                            # Active le flag que si false, la première fois qu'une ligne (avec num) est rencontrée
                            # Éviter de remettre à true la variable et économise du CPU
                            if [ $FLAG_DONNEES_PR_REMPLACEMENT_COMPLETE = "false" ]
                            then
                                FLAG_DONNEES_PR_REMPLACEMENT_COMPLETE="true"
                            else
                                :
                            fi
                            ;; # si débute par un numéro de ligne
            * )             continue # Ligne vide : passer à la boucle (ligne) suivante sans rien afficher
                            ;; # va à la prochaine boucle -> évite de lancer la commande de remplacement sans argument (provoquerait erreur)
            esac
            if [ $FLAG_DONNEES_PR_REMPLACEMENT_COMPLETE = "true" ]
            then
		{ sed -i "${NUMERO_LIGNE_COURANTE}s/${REGEX_RECHERCHE}/${STRING_REMPLACEMENT}/g" "$PATH_COURANT" &&
		# sed -i '' : inline - sans fichier de back-up
                # s/ : substitute
                      # g : remplace tous les matchs pas juste le premier
	          echo -e "\n$NUMERO_LIGNE_COURANTE : Line sucessfully remplaced !\n"
		} ||
		{ STDERR_afficher_message "\nERROR : the line $NUMERO_LIGNE_COURANTE could not be replaced. Please check output...\n"
			exit 1
		}
            else
                : # Pas de remplacement tant que le flag n'est pas activé.
            fi

	    # Print all lines of the file
        done < <(grep $ "$PATH_FICHIER_OUTPUT_CORBEILLE")
        echo -e "\nRemplacement terminé.\n"
    else
        # Else review each file one by one
        # Récupération des données : elles sont déjà nettoyées il ne reste plus qu'à récupérer les éléments pour le remplacement.
        # récupérer les data du fichier dans la corbeille
        REPERTOIRE_COURANT=""
        FICHIER_COURANT=""
        PATH_COURANT=""
        LIGNE_COURANTE=""
        NUMERO_LIGNE_COURANTE=""
        # Liste des flags qui influencent l'affichage
        FLAG_LIGNE_A_AFFICHER="false"
        # Tableau de stockage pour affichage des match par fichier et éventuels gestion un par un
        declare -a TABLEAU_LIGNES
        declare -a TABLEAU_NUMERO_LIGNES
        # Gestion des datas du select hors boucle pour éviter qu'elles soient réinitialisées à chaque fois
        declare -a TABLEAU_OPTIONS_SELECT
        OPTION_1="Remplacer tous les match du fichier"
        OPTION_2="Contrôler les match un par un"
        OPTION_POUR_STOP="Quitter"
        TABLEAU_OPTIONS_SELECT+=("$OPTION_1")
        TABLEAU_OPTIONS_SELECT+=("$OPTION_2")
        CHOIX_CHOISI="" # réinitialisation dans la fonction à chaque appel de toute façon
        MESSAGE_MONTRE="Que décidez-vous ? "
        # Affichage des données pour prise de décision
        while read -r LIGNE_FINALE
        do	    
                    case "$LIGNE_FINALE" in
                    '/'* )          REPERTOIRE_COURANT="$LIGNE_FINALE"
                                    ;; # si débute par '/'
                    [^1-9]* )       FICHIER_COURANT="$LIGNE_FINALE"
                                    PATH_COURANT="${REPERTOIRE_COURANT}/${FICHIER_COURANT}"
                                    ;; # si débute par exactement 1x tab -> affichage avec 1x tab
                    [1-9]* )        TABLEAU_LIGNES+=("$LIGNE_FINALE") # Ajout de la ligne au tableau des lignes
                                    NUMERO_LIGNE="$(echo "$LIGNE_FINALE" | awk ' { print $1 } ' )"
                                    TABLEAU_NUMERO_LIGNES+=("$NUMERO_LIGNE") # Ajout du numéro de ligne au tableau des numéro de lignes.
                                    FLAG_LIGNE_A_AFFICHER="true" # passage du flag à true car il y a du contenu à afficher.
                                    # Dès qu'une ligne vide sera captée, le contenu sera affiché et le flag repassé à "false"
                                    ;; # si débute par un numéro de ligne
                    * )             if [ $FLAG_LIGNE_A_AFFICHER = "true" ]
                                    then 
                                        # Affichage données du fichiers avec espacements esthétiques
                                        echo ""
                                        echo "$REPERTOIRE_COURANT"
                                        echo ""
                                        echo "$FICHIER_COURANT"
                                        echo ""
                                        # Affichage contenu tableau
                                        tableau_affichage_contenu_avec_message TABLEAU_LIGNES
                                        # Sélection :
                                        # Remplacer tous les match du fichier en question ?
                                        # Les passer en revue un par un ?
                                        # Quitter
                                        select_parmi_liste TABLEAU_OPTIONS_SELECT CHOIX_CHOISI "$MESSAGE_MONTRE" "$OPTION_POUR_STOP" 
                                        if [ "$CHOIX_CHOISI" = "$OPTION_POUR_ARRETER" ]
                                        then
                                            echo -e "\nYou choosed to cancel the replacement.\n"
                                            exit 0
                                        else
                                            echo -e "\nYou choosed : \"$CHOIX_CHOISI\".\n"
                                            if [ "$CHOIX_CHOISI" = "$OPTION_1" ] # validation massive pour ce fichier et passage au fichier suivant
                                            then
                                                for LINE_NUMBER in "${TABLEAU_NUMERO_LIGNES[@]}"
                                                do
                                                    { sed -i "${LINE_NUMBER}s/${REGEX_RECHERCHE}/${STRING_REMPLACEMENT}/g" "$PATH_COURANT" &&
                                                    # sed -i '' : inline - sans fichier de back-up
                                                    # s/ : substitute
						    # g : remplace tous les matchs pas juste le premier
						    echo -e "\n$LINE_NUMBER : Line sucessfully remplaced !\n"
						    } ||
						    { STDERR_afficher_message "\nERROR : the line $LINE_NUMBER could not be replaced. Please check output...\n"
							    exit 1
						    }
                                                done
						
                                            else # passage en revue un par un
                                                QUESTION_VALIDATION_REMPLACEMENT="Voulez-vous remplacer \"$REGEX_RECHERCHE\" par \"$STRING_REMPLACEMENT\" dans cette ligne du fichier \"$FICHIER_COURANT\" situé $PATH_COURANT ? (YyOn/Nn) "
                                                for i in "${!TABLEAU_LIGNES[@]}"
                                                do 
                                                    echo -e "\nLIGNE : \"${TABLEAU_LIGNES[$i]}\"" # 
                                                    # choix oui non
                                                    REPONSE_POUR_CHAQUE_LIGNE="" # réinitialisation de la réponse à chaque boucle
                                                    question_oui_non REPONSE_POUR_CHAQUE_LIGNE "$QUESTION_VALIDATION_REMPLACEMENT"
                                                    if [ "$REPONSE_POUR_CHAQUE_LIGNE" = "o" ]
                                                    then
							# Get the ligne number
                                                        NUM_LIGNE_REMPLACEMENT=$((${TABLEAU_NUMERO_LIGNES[$i]}))
                                                        
                                                        { sed -i "${NUM_LIGNE_REMPLACEMENT}s/${REGEX_RECHERCHE}/${STRING_REMPLACEMENT}/g" "$PATH_COURANT" &&
                                                        # sed -i : inline - sans fichier de back-up
                                                        # s/ : substitute
                                                        # g : remplace tous les matchs pas juste le premier
							  echo -e "\n$NUM_LIGNE_REMPLACEMENT : Line sucessfully remplaced !\n"
							} ||
							{ STDERR_afficher_message "\nERROR : the line $NUM_LIGNE_REMPLACEMENT could not be replaced. Please check output...\n"
								exit 1
							}
						     fi
                                                done
                                            fi
					    echo -e "\nEnd of replacement for the file \"$FICHIER_COURANT\" located \"$PATH_COURANT\".\n"
                                        fi
                                        FLAG_LIGNE_A_AFFICHER="false"
                                        TABLEAU_LIGNES=() # remise à vide du tableau
                                        TABLEAU_NUMERO_LIGNES=() # remise à vide du tableau
                                    else
                                        : # lignes vides sont ignorées sinon
                                    fi
                                    ;; # match les lignes vides
                    esac
		    # Print all lines of the file
                done < <(grep $ "$PATH_FICHIER_OUTPUT_CORBEILLE")
    fi
fi

