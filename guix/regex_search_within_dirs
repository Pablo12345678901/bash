#!/usr/bin/env bash

# Syntaxe :
# $1 : le REGEX -> fourni sous format REGEX (pas d'annulation de char spécial ici)
# $2 : optionnel : le fichier/répertoire
# $... : optionnel fichier/répertoire
# $DERNIER : optionnel : '-s' pour indiquer un mode silencieux sans message à destination de l'utilisateur.
############ AVERTISSEMENT ############
# Ce script peut être long selon la taille (le nombre de fichier) du répertoire
# dans lequel la commande 'find' effectue sa recherche.
# Il n'affiche aucun message d'erreur.
# Et pendant le chargement - rien n'est affiché.
# Les résultats sont affichés par bloc est affiché en bloc.
############ AVERTISSEMENT ############

source functions_personal

# Syntaxe
SYNTAXE="$(syntaxe_afficher_si_erreur "$(basename $0)" "-r REGEX_RECHERCHE" "-d REPERTOIRE_DE_RECHERCHE [...]" "[-s]")"
# -s : activate the silent mode
# --separation-double-points : returns output separated with ':' in order to be reused in another script.

# Set default behaviour with the below variables
# Can be modified by providing arguments to script
# By default, the silent mode is not activated.
SILENT_MODE="false"

# The below array is requested below so have to be declared here
declare -a TABLEAU_FICHIERS

####### BEGINNING OF OPTION MANAGEMENT ##########

# Note that we use "$@" to let each command-line parameter expand to a
# separate word. The quotes around "$@" are essential!
# We need TEMP as the 'eval set --' would nuke the return value of getopt.
TEMP=$(getopt --options 'd:r:s' -q -- "$@")
# -q : quiet
# -- : to explicitly show the options end

# Test whether syntax was correct (options + arguments)
if [ $? -ne 0 ]
then
    STDERR_show_message "ERROR: syntax..."
    STDERR_show_message "$SYNTAXE"
    exit 1
fi

# Arguments check
FLAG_OPTION_D=
FLAG_OPTION_R=

# Re-set options through positional parameters
eval set -- "$TEMP"
unset TEMP

while true; do
    case "$1" in
	-d )
	    FLAG_OPTION_D=1
	    # Add to dir array
	    FILE_PROVIDED="$2"
	    shift 2
	    # Get the path whether it is absolute or relative
	    # 'readlink --canonicalize' : follow all the symlink and therefore support relative path as well as absolute ones
	    FILE_PROVIDED_ABSOLUTE_PATH="$(readlink --canonicalize "${FILE_PROVIDED}")"
	    # Test if the file provided is really a file or a directory - exit with error else
	    if [ -d "$FILE_PROVIDED_ABSOLUTE_PATH" ] || [ -f "$FILE_PROVIDED_ABSOLUTE_PATH" ]
            then
		# Test if it is a directory
                if [ -d "$FILE_PROVIDED_ABSOLUTE_PATH" ]
                then
		    # Fill array with all files contained in the directory
                    repertoire_remplissage_tableau_avec_fichier_sauf_certaines_exceptions_recherche_triee_avec_find TABLEAU_FICHIERS "$FILE_PROVIDED_ABSOLUTE_PATH"
                else
		    # Else, it is a file so add it to the array.
                    TABLEAU_FICHIERS+=("$FILE_PROVIDED_ABSOLUTE_PATH")
                fi
            else
                STDERR_show_message "\nERROR : the provided argument to '-d' = \"$FILE_PROVIDED\" (with absolute path : \"$FILE_PROVIDED_ABSOLUTE_PATH\") is neither a file nor a directory.\n"
                STDERR_show_message "$SYNTAXE"
                exit 1 
            fi
	    continue
            ;;
	-r )  
	    FLAG_OPTION_R=1
            REGEX_RECHERCHE="$2"
            shift 2
            continue
            ;;
	-s )  
	    SILENT_MODE="true"
	    shift 1
	    continue
            ;;
       	'--')
	    shift
	    break
      	    ;;
        * )
	    # Error management for all other bugs
            STDERR_show_message "ERROR: internal error...\n"
            STDERR_show_message "$SYNTAXE"
            exit 2
            ;;
	esac
done

# Test whether other arguments were provided = in excess (=test if $1 is defined)
if [ ! -z "$1" ]
then
    STDERR_show_message "\nERROR : argument(s) in excess : \"$*\".\n"
    STDERR_show_message "$SYNTAXE"
    exit 3
fi

# Test if the requested option(s) were provided
if [ -z "$FLAG_OPTION_R" ] || [ -z "$FLAG_OPTION_D" ]
then
    STDERR_show_message "\nERROR : Please provide all requested argument(s).\n"
    STDERR_show_message "$SYNTAXE"
    exit 3
fi

########## END OF OPTION MANAGEMENT ####################

# Show message only if not in silent mode
if [ ! "$SILENT_MODE" = "true" ]
then
    # Show the detailed list of files on which the search will be processed
    MESSAGE_AVANT_CONTENU_TABLEAU="\nAffichage des fichiers contenant le REGEX \"$REGEX_RECHERCHE\" parmi les fichiers :"
    MESSAGE_AVANT_CHAQUE_ELEMENT="-\t"
    tableau_affichage_contenu_avec_message TABLEAU_FICHIERS "$MESSAGE_AVANT_CONTENU_TABLEAU" "$MESSAGE_AVANT_CHAQUE_ELEMENT"
    echo -e "Ainsi que pour chaque fichiers qui matche : le nom du fichier, le numéro de ligne et son contenu.\n"
fi

# Affichage du résultat
# Variable nécessaire pour l'affichage que si le répertoire / fichier a changé depuis la dernière ligne (match)
REPERTOIRE_COURANT=""
FICHIER_COURANT=""
DERNIER_REPERTOIRE_AFFICHE=""
DERNIER_FICHIER_AFFICHE=""
# Pour chaque fichier, grep + affichage des lignes match.
for CHAQUE_FICHIER in "${TABLEAU_FICHIERS[@]}"
do
    # Get all match and with '-r' : do not let '\' espace any char
    while read -r MATCH
    do	
        # Recover the first element before the ':'
        PATH_FICHIER="$(echo "$MATCH" | awk -F ':' ' { print $1 }')"
	# awk -F = 'fieldseparator'
        # Transformation from relative to absolute path if required
	PATH_FICHIER="$(readlink --canonicalize "${PATH_FICHIER}")"
        NUM_LIGNE="$(echo "$MATCH" | awk -F ':' ' { print $2 }')"
        # Get the line content which is after two ':' - cannot echo it, else the '\' will act as special chars and will be replaced by their equivalents.
	CONTENU_LIGNE="${MATCH#*:*:}"
        # Séparation du répertoire et du fichier seul
        FICHIER_COURANT="${PATH_FICHIER##*/}" # récupération du bout de path après le dernier '/'
        REPERTOIRE_COURANT="${PATH_FICHIER%/$FICHIER_COURANT}" # retirer le fichier du path
        # Affichage du répertoire courant que si différent de celui du précédent match (ligne qui a matché)
        if [ "$REPERTOIRE_COURANT" != "$DERNIER_REPERTOIRE_AFFICHE" ]
        then
            echo -e "\n$REPERTOIRE_COURANT"
            DERNIER_REPERTOIRE_AFFICHE="$REPERTOIRE_COURANT" # puis adaptation du dernier répertoire affiché au répertoire courant
        fi
        # Affichage du fichier courant que si différent de celui du précédent match (ligne qui a matché)
        if [ "$FICHIER_COURANT" != "$DERNIER_FICHIER_AFFICHE" ]
        then
            # Décalage de 1 tab
            echo -e "\n\t$FICHIER_COURANT\n"
            DERNIER_FICHIER_AFFICHE="$FICHIER_COURANT" # puis adaptation du dernier fichier affiché au fichier courant
        else
            :
        fi
	# Show line and content for each match
	# Two 2 tabs before the line number and no trailing new line
        echo -e -n "\t\t${NUM_LIGNE}\t"
	# The line content has to be sent as it is without expansion of backslash chars.
	echo -E "${CONTENU_LIGNE}"

	# Get the lines that match the regex within each file.
	# Silent STDERR
    done < <(grep -E "$REGEX_RECHERCHE" -H -n -- "$CHAQUE_FICHIER" 2>/dev/null)
    # grep -E : extended regex
    # grep -H : show path of file that matched
    # grep -n : show line number
done

# End message - usefull because the script can take long to execute
# Show only if not in silent mode
if [ ! "$SILENT_MODE" = "true" ]
then
    echo -e "\nSearch ended."
fi

echo "" # Esthetic

exit 0
