#!/usr/bin/env bash

source fonctions_personnelles

# Syntaxe :
SYNTAXE="$(syntaxe_afficher_si_erreur "$(basename $0)" "[-r GIT_REPO_TO_PUSH]" "[-m MESSAGE_WITH_COMMIT]")"

####### BEGINNING OF OPTION MANAGEMENT ##########

# Note that we use "$@" to let each command-line parameter expand to a
# separate word. The quotes around "$@" are essential!
# We need TEMP as the 'eval set --' would nuke the return value of getopt.
TEMP=$(getopt --options 'r:m:' -q -- "$@")
# -q : quiet
# -- : to explicitly show the options end

# Test whether syntax was correct (options + arguments)
if [ $? -ne 0 ]
then
    STDERR_afficher_message "ERROR: syntax..."
    STDERR_afficher_message "$SYNTAXE"
    exit 1
fi

# Arguments check
FLAG_OPTION_M=
FLAG_OPTION_R=

# Re-set options through positional parameters
eval set -- "$TEMP"
unset TEMP

while true; do
    case "$1" in
	-m )  
	    FLAG_OPTION_M=1
            MESSAGE_WITH_COMMIT="$2"
            shift 2
            continue
            ;;
	-r )  
	    FLAG_OPTION_R=1
            GIT_REPO_TO_PUSH="$2"
            shift 2
            continue
            ;;
       	'--')
	    shift
	    break
      	    ;;
        * )
	    # Error management for all other bugs
            STDERR_afficher_message "ERROR: internal error...\n"
            STDERR_afficher_message "$SYNTAXE"
            exit 2
            ;;
	esac
done

# Test whether other arguments were provided = in excess (=test if $1 is defined)
if [ ! -z "$1" ]
then
    STDERR_afficher_message "\nERROR : argument(s) in excess : \"$*\".\n"
    STDERR_afficher_message "$SYNTAXE"
    exit 3
fi
    
# The below parameter is needed later for each 'if' cases so has to be set here.
CHOICE_GIT_REPO_TO_PUSH=""

# Test if git repo was provided as script argument
if [ ! -z "$FLAG_OPTION_R" ]
then
    # Check if the file provided is a directory and if it is a git repo
    CHOICE_GIT_REPO_TO_PUSH="$GIT_REPO_TO_PUSH"
    # If the argument provided is not a dir
    if [ ! -d "$CHOICE_GIT_REPO_TO_PUSH" ]
    then
	# Check if it is the basename of a dir within the git repos dir
	if [ ! -d "${REPERTOIRE_DEVELOPPEMENT}/${CHOICE_GIT_REPO_TO_PUSH}" ]
	then
	    # Exit with error if the later is not a dir within the git repos dir
	    STDERR_afficher_message "\nERROR : the argument provided for '-r' : \"$CHOICE_GIT_REPO_TO_PUSH\" is not a directory.\n"
            STDERR_afficher_message "$SYNTAXE"
	    exit 4
	else
	    # Else adapt the path
	    CHOICE_GIT_REPO_TO_PUSH="${REPERTOIRE_DEVELOPPEMENT}/${CHOICE_GIT_REPO_TO_PUSH}"
	fi
    else
	# Else, check that it is a dir within the git repo dir
	# This avoids to control if it is a git dir because I only use this dir for this usage.
	if [[ "$CHOICE_GIT_REPO_TO_PUSH" =~ ^"$REPERTOIRE_DEVELOPPEMENT".*$ ]]
	then
	    :
	else
	    # Exit with error if the later is not a dir within the git repos dir
	    STDERR_afficher_message "\nERROR : the argument provided for '-r' : \"$CHOICE_GIT_REPO_TO_PUSH\" is not a git directory located within the dir REPERTOIRE_DEVELOPPEMENT = \"$REPERTOIRE_DEVELOPPEMENT\".\n"
	    STDERR_afficher_message "$SYNTAXE"
	    exit 5
	fi	
    fi
else
    # Else, ask for it.
    # Fill an array with all names of git repos that require to push
    declare -a ARRAY_OF_REPO_TO_GIT_PUSH
    while read GIT_REPO_NEEDING_TO_BE_PUSHED
    do
	ARRAY_OF_REPO_TO_GIT_PUSH+=("$GIT_REPO_NEEDING_TO_BE_PUSHED")
    done < <(echo $(git_check_if_up_to_date) |
	sed -E "s/[[:space:]][0-9]*[[:space:]]*[-][[:space:]]/\\n/g" | tail -n +2)

    # If array is empty, exit with sucess code
    if [ ${#ARRAY_OF_REPO_TO_GIT_PUSH[@]} -eq 0 ]
    then
	echo -e "\nThe script ${0##*/} cannot commit any repo because they are all already up-to-date.\n"
	exit 0
    fi
    
    # Choose which repo to push
    OPTION_TO_STOP="Quit"
    QUESTION_WHICH_REPO_TO_PUSH="Which git repo would you like to push ? "
    select_parmi_liste ARRAY_OF_REPO_TO_GIT_PUSH CHOICE_GIT_REPO_TO_PUSH "$QUESTION_WHICH_REPO_TO_PUSH" "$OPTION_TO_STOP"

    # Show confirmation message of the action choosed
    if [ "$CHOICE_GIT_REPO_TO_PUSH" != "$OPTION_TO_STOP" ]
    then
	echo -e "\nYou choosed to git push the git repo : \"$CHOICE_GIT_REPO_TO_PUSH\".\n"
	# Set the path of the git repo to be pushed
	CHOICE_GIT_REPO_TO_PUSH="$REPERTOIRE_DEVELOPPEMENT/$CHOICE_GIT_REPO_TO_PUSH"
    else
	echo -e "\nYou choosed to cancel the git push.\n"
	exit 0
    fi
fi



########## END OF OPTION MANAGEMENT ####################

# Go into the git repo to push
cd $CHOICE_GIT_REPO_TO_PUSH

# SPECIAL : only if the git repo to be pushed is bash
if [ $PWD == "$REPERTOIRE_DEVELOPPEMENT/bash" ]
then
    # Add this script too because if seems that git does not push it because it is currently runned.
    git add "$0"
fi

# Add all files to commit
git add . &&

# Show the files that will be pushed
git status &&

# If no message with the commit were provided as script argument, ask it.
{ if [ -z "$FLAG_OPTION_M" ]
then
    while [ ${#MESSAGE_WITH_COMMIT} -eq 0 ]
    do
	read -rp "Which message to add with the git push ? " MESSAGE_WITH_COMMIT
	# -r : do not let the slashes '\' to behave like special char
	if [ ${#MESSAGE_WITH_COMMIT} -eq 0 ]
	then
	    STDERR_afficher_message "\nERROR : At least one char have to be written for the 'git commit' message.\n"
	fi
    done
fi } &&

# Git commit and push with success/failure confirmation
{   git commit -m "$MESSAGE_WITH_COMMIT" &&
    git push  && echo -e "\nCommit of git repo \"$CHOICE_GIT_REPO_TO_PUSH\" = DONE\n" &&
    cd "$OLDPWD" &&
    exit 0
} ||
{ STDERR_afficher_message "\nERROR : The commit of the git repo \"$CHOICE_GIT_REPO_TO_PUSH\" failed or there was nothing to push.\n"
  cd "$OLDPWD"
  exit 6
}

