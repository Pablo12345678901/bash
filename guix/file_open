#!/usr/bin/env bash

source functions_personal

# Syntaxe
SYNTAXE="$(syntaxe_afficher_si_erreur "$(basename $0)" "-f FILE_TO_OPEN" )"

# Note that we use "$@" to let each command-line parameter expand to a
# separate word. The quotes around "$@" are essential!
# We need TEMP as the 'eval set --' would nuke the return value of getopt.
TEMP=$(getopt -o 'f:' -q -- "$@")
# -o : list of short options
# -q : quiet
# -- : announce the end of the options

# Test if the syntax is correct (options + arguments)
if [ $? -ne 0 ]
then
    STDERR_afficher_message "\nERROR : syntax error.\n"
    STDERR_afficher_message "$SYNTAXE"
    exit 1
fi

# Set the flag to control arguments
FLAG_OPTION_F= 

# Re-set options as positional parameters
eval set -- "$TEMP"
unset TEMP

while true; do
	case "$1" in
        '-f' )
            FLAG_OPTION_F=1
	    # Set the file provided
	    FILE_TO_OPEN="$2"
	    # Preserve what was initially provided for further printed messages
            ARGUMENT_PROVIDED="$FILE_TO_OPEN"
            shift 2
	    # If the filename contains '$', process to expansion
	    # Some terminals add '\' before '$' so it functions -  with them all.
	    if [[ "$FILE_TO_OPEN" =~ ^.*\$.*$ ]]
	    then
		FILE_TO_OPEN="${FILE_TO_OPEN@P}"
	    fi
            # Manage absolute and relative paths with 'readlink --canonicalize'
	    # Test if the path exists, if so set path of the file to open
	    # Else exit with error
	    { readlink --canonicalize "$FILE_TO_OPEN" >/dev/null 2>&1 &&
	      PATH_FILE_TO_OPEN="$(readlink --canonicalize "$FILE_TO_OPEN")"
            }||
	    { STDERR_afficher_message "\nERROR : the file \"$FILE_TO_OPEN\" (provided with your argument \"$ARGUMENT_PROVIDED\") does not exist.\n"
              exit 2
	    }
            continue
            ;;
       '--')
	    shift
	    break
	    ;;
        # Error showed for any other error
        * )
            STDERR_afficher_message "\nERROR : internal error...\n"
            STDERR_afficher_message "$SYNTAXE"
            exit 3
            ;;
	esac
done

# Test if other arguments = in excess (=test if $1 is defined)
if [ ! -z "$1" ]
then
    STDERR_afficher_message "\nERROR : argument(s) in excess : \"$*\".\n"
    STDERR_afficher_message "$SYNTAXE"
    exit 4
fi

# Test if all required arguments were provided with the flags
if [ -z "$FLAG_OPTION_F" ] 
then
    STDERR_afficher_message "\nERROR : Please provide all required argument(s).\n"
    STDERR_afficher_message "$SYNTAXE"
    exit 5
fi

# Get the file basename for further messages
FILE_BASENAME="${PATH_FILE_TO_OPEN##*/}"

# Check if the file is a dir to adapt for further messages
FILE_TYPE=""
if [ -d "$PATH_FILE_TO_OPEN" ]
then
    FILE_TYPE="directory"
else
    FILE_TYPE="file"
fi

# Opening the file with confirmation of success/failure
echo -e "\nOpening the $FILE_TYPE \"$FILE_BASENAME\" (called with your argument \"$ARGUMENT_PROVIDED\") located \"$PATH_FILE_TO_OPEN\"...\n"
{   xdg-open "$PATH_FILE_TO_OPEN" >/dev/null 2>&1 &&
    exit 0
} ||
{   STDERR_afficher_message "\nERROR : the $FILE_TYPE \"$FILE_BASENAME\" (called with your argument \"$ARGUMENT_PROVIDED\") located \"$PATH_FILE_TO_OPEN\"could not be opened.\n" &&
    exit 6
} 
