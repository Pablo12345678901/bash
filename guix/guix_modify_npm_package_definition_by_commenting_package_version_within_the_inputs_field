#!/usr/bin/env bash

source functions_personal

# Syntaxe
SYNTAX="$(syntaxe_afficher_si_erreur "$(basename $0)" "-f SCHEME_FILE")"

####### BEGINNING OF OPTION MANAGEMENT ##########

# Note that we use "$@" to let each command-line parameter expand to a
# separate word. The quotes around "$@" are essential!
# We need TEMP as the 'eval set --' would nuke the return value of getopt.
TEMP=$(getopt --options 'f:' -q -- "$@")
# -q : quiet
# -- : to explicitly show the options end

# Test whether syntax was correct (options + arguments)
if [ $? -ne 0 ]
then
    STDERR_show_message "ERROR: syntax..."
    STDERR_show_message "$SYNTAX"
    exit 1
fi

# Arguments check
FLAG_OPTION_F=

# Re-set options through positional parameters
eval set -- "$TEMP"
unset TEMP

while true; do
    case "$1" in
	-f )
	    FLAG_OPTION_F=1
	    FILE_PROVIDED="$2"
	    shift 2
	    # Get the path whether it is absolute or relative
	    # 'readlink --canonicalize' : follow all the symlink and therefore support relative path as well as absolute ones
	    FILE_PROVIDED_ABSOLUTE_PATH="$(readlink --canonicalize "${FILE_PROVIDED}")"
	    # Test if the file provided is really a file - exit with error else
	    if [ ! -f "$FILE_PROVIDED_ABSOLUTE_PATH" ]
            then
                STDERR_show_message "\nERROR : the provided argument to '-f' = \"$FILE_PROVIDED\" (with absolute path : \"$FILE_PROVIDED_ABSOLUTE_PATH\") is not a file.\n"
                STDERR_show_message "$SYNTAX"
                exit 2
            fi
	    # Test if the file has a '.scm' extension (is a scheme file)
	    if [[ ! "$FILE_PROVIDED_ABSOLUTE_PATH" =~ ^.*\.scm$ ]]
	    then
                STDERR_show_message "\nERROR : the provided argument to '-f' = \"$FILE_PROVIDED\" (with absolute path : \"$FILE_PROVIDED_ABSOLUTE_PATH\") is not a scheme file. \nThere is no '.scm' extension at the end of the filename.\n"
                STDERR_show_message "$SYNTAX"
                exit 3
	    fi
	    # Set the file to process if all tests were passed.
	    PATH_OF_FILE_TO_PROCESS="$FILE_PROVIDED_ABSOLUTE_PATH"
	    continue
            ;;
       	'--')
	    shift
	    break
      	    ;;
        * )
	    # Error management for all other bugs
            STDERR_show_message "ERROR: internal error...\n"
            STDERR_show_message "$SYNTAX"
            exit 4
            ;;
	esac
done

# Test whether other arguments were provided = in excess (=test if $1 is defined)
if [ ! -z "$1" ]
then
    STDERR_show_message "\nERROR : argument(s) in excess : \"$*\".\n"
    STDERR_show_message "$SYNTAX"
    exit 5
fi

# Test if the requested option(s) were provided
if [ -z "$FLAG_OPTION_F" ]
then
    STDERR_show_message "\nERROR : Please provide all requested argument(s).\n"
    STDERR_show_message "$SYNTAX"
    exit 6
fi

########## END OF OPTION MANAGEMENT ####################

REGEX_BEGINNING_OF_INPUTS_BLOCK='^[[:space:]]*\\(inputs.*$'
declare -a LIST_OF_PACKAGE_NAME_TO_REPLACE_WITHIN_FILE
declare -a LIST_OF_REPLACEMENT_STRING

LIST_OF_PACKAGE_NAME_TO_REPLACE_WITHIN_FILE=($(cat "$PATH_OF_FILE_TO_PROCESS" |
# Get only the block of 'inputs' by counting number of opening and closing parenthesis when there is the '(inputs' and stopping to print the output as soon as parenthesis reach '0' (=balanced).
awk -v REGEX=$REGEX_BEGINNING_OF_INPUTS_BLOCK ' { if ($0 ~ REGEX) \
{ print $0 ; \
for (i = 1; i <= length($0); i++) \
    { c = substr($0, i, 1); \
      if (c == "(") number_of_parenthesis++; \
	 if (c == ")") number_of_parenthesis--; \
    } }
else { if (number_of_parenthesis > 0) \
     { { print $0 } ;
     for (i = 1; i <= length($0); i++) \
     { c = substr($0, i, 1); \
      if (c == "(") number_of_parenthesis++; \
	 if (c == ")") number_of_parenthesis--; } }
    } \
}' |
# Replace space by backline
tr ' ' '\n' |
# Remove the line containing the '(inputs' and '(list'
grep -E -v '^[[:space:]]*[\(](inputs|list)$' |
# Remove empty (or with space char only) lines
grep -E -v '^[[:space:]]*$' |
# Remove commented lines
grep -E -v '^[[:space:]]*;.*$' |
# Remove lines containing only parenthesis
grep -E -v '^[[:space:]]*(\))+[[:space:]]*' |
# Remove all end of line parenthesis
tr -d ')' ))

# Fill an array containing for each package, its replacement string with format 'name SPACE version'
for EACH_PACKAGE in "${LIST_OF_PACKAGE_NAME_TO_REPLACE_WITHIN_FILE[@]}"
do
    PACKAGE_VERSION="${EACH_PACKAGE##*-}"
    PACKAGE_NAME="${EACH_PACKAGE%-$PACKAGE_VERSION}"
    # Format : package_name ;(for comment)-VERSION BACKLINE-TO-ENSURE-THAT-TWO-PACKAGE-ARE-NOT-ON-THE-SAME-LINE
    # The backline avoid the case where if several package are on the same line, after commenting the version of the first package, the next ones are within the commented line.
    REPLACEMENT_STRING="$PACKAGE_NAME ;-$PACKAGE_VERSION\n"
    LIST_OF_REPLACEMENT_STRING+=("$REPLACEMENT_STRING")
done

ARRAY_SIZE=$(tableau_taille LIST_OF_REPLACEMENT_STRING)

for ((i=0; i<ARRAY_SIZE; i++))
do
    { sed -i "s/${LIST_OF_PACKAGE_NAME_TO_REPLACE_WITHIN_FILE[$i]}/${LIST_OF_REPLACEMENT_STRING[$i]}/g" "$PATH_OF_FILE_TO_PROCESS" &&
      echo -e "\nOK : Replacement of '${LIST_OF_PACKAGE_NAME_TO_REPLACE_WITHIN_FILE[$i]}' by '${LIST_OF_REPLACEMENT_STRING[$i]}'.\n"
    } ||
    { echo -e "\nERROR : replacement of '${LIST_OF_PACKAGE_NAME_TO_REPLACE_WITHIN_FILE[$i]}' by '${LIST_OF_REPLACEMENT_STRING[$i]}' could not be done.\n"
      exit 7
    }
done

echo -e "\nOK : replacements finished.\n"
exit 0
