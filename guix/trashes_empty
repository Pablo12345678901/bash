#!/usr/bin/env bash

# Syntax :
# - : no required arguments.

source functions_personal

# Declare here all trashes (directories) to empty by add the name of the environment variables into an array.
declare -a TRASHES_ENV_VAR_ARRAY
TRASHES_ENV_VAR_ARRAY+=("CORBEILLE_PATH")
TRASHES_ENV_VAR_ARRAY+=("CORBEILLE_DISQUE_DUR_PATH")

# Use a loop to test that each variable is correctly set and if so, add its value to a string used later.
for EACH_TRASH in "${TRASHES_ENV_VAR_ARRAY[@]}"
do
    # Check that all trashes correspond to an existing directory
    if [ -d "${!EACH_TRASH}" ]
    then
	# If so, add the environment variable name and its value to a string that will be used later.
        LIST_OF_TRASHES_WITH_VALUE="${LIST_OF_TRASHES_WITH_VALUE}${EACH_TRASH} : \"${!EACH_TRASH}\"
"
    else
	# Else, print error message and exit.
	STDERR_show_message "\nERROR : the trash defined in the environment variable \"$EACH_TRASH\" is not set to an existing directory. \nCurrently, its value is : \n$EACH_TRASH : \"${!EACH_TRASH}\" \n"
	exit 1
    fi
done

# Check user agreement to remove content of directories printing their paths.
USER_ANSWER=""
QUESTION_AGREEMENT_OF_DIRECTORIES_TO_EMPTY="Do you agree to remove the content of the following directories (environment variables to set) :

$LIST_OF_TRASHES_WITH_VALUE

? (YyOo/Nn) "

question_oui_non USER_ANSWER "$QUESTION_AGREEMENT_OF_DIRECTORIES_TO_EMPTY"

if [ "$USER_ANSWER" = 'n' ]
then
    STDERR_show_message "\nPlease set correctly the environment variable listed above before to re-run this script \"$(basename $0)\" \n\nWarning : this script can remove critical files if they are not correctly set.\n"
fi

# Empty all trashes
echo -e "\nEmptying trashes...\n"

# Loop on each trash
for TRASH in "${TRASHES_ENV_VAR_ARRAY[@]}"
do
    # Get the list of files within the directory.
    FILES_WITHIN_TRASH="$(find ${!TRASH}/ -maxdepth 1 -mindepth 1 -name . -o -prune -name .. -o -prune 2>/dev/null)"
    
    # Test if no file were found (=directory already empty)
    if [ -z "$FILES_WITHIN_TRASH" ]
    then
	 echo -e "\nThe trash located \"${!TRASH}\" was already empty !\n"
    else
	# If at least one file was present, remove it.
	echo -e "\nEmptying the trash located \"${!TRASH}\"...\n"
	{ find "${!TRASH}/" -maxdepth 1 -mindepth 1 -name . -o -prune -name .. -o -prune -exec rm -ri -- '{}' \; &&
	  # Printing confirmation message
	  echo -e "\nThe trash located \"${!TRASH}\" was emptied !\n"
	} ||
	# If error occurs, print error message and exit with error code
	{ STDERR_show_message "\nERROR : the trash located ${!TRASH} could not be emptied. \nPlease check script output and/or script content...\n" &&
	  exit 1
	}
    fi
done

exit 0
