1 Introduction
1.1 Managing Software the Guix Way
1.2 GNU Distribution
2 Installation
2.1 Binary Installation
2.2 Requirements
2.3 Running the Test Suite
2.4 Setting Up the Daemon
2.4.1 Build Environment Setup
2.4.2 Using the Offload Facility
2.4.3 SELinux Support
2.4.3.1 Installing the SELinux policy
2.4.3.2 Limitations
2.5 Invoking guix-daemon
2.6 Application Setup
2.6.1 Locales
2.6.2 Name Service Switch
2.6.3 X11 Fonts
2.6.4 X.509 Certificates
2.6.5 Emacs Packages
2.7 Upgrading Guix
3 System Installation
3.1 Limitations
3.2 Hardware Considerations
3.3 USB Stick and DVD Installation
Copying to a USB Stick
Burning on a DVD
Booting
3.4 Preparing for Installation
3.5 Guided Graphical Installation
3.6 Manual Installation
3.6.1 Keyboard Layout, Networking, and Partitioning
3.6.1.1 Keyboard Layout
3.6.1.2 Networking
3.6.1.3 Disk Partitioning
3.6.2 Proceeding with the Installation
3.7 After System Installation
3.8 Installing Guix in a Virtual Machine
3.9 Building the Installation Image
3.10 Building the Installation Image for ARM Boards
4 System Troubleshooting Tips
4.1 Chrooting into an existing system
5 Getting Started
6 Package Management
6.1 Features
6.2 Invoking guix package
6.3 Substitutes
6.3.1 Official Substitute Servers
6.3.2 Substitute Server Authorization
6.3.3 Getting Substitutes from Other Servers
6.3.4 Substitute Authentication
6.3.5 Proxy Settings
6.3.6 Substitution Failure
6.3.7 On Trusting Binaries
6.4 Packages with Multiple Outputs
6.5 Invoking guix locate
6.6 Invoking guix gc
6.7 Invoking guix pull
6.8 Invoking guix time-machine
6.9 Inferiors
6.10 Invoking guix describe
6.11 Invoking guix archive
7 Channels
7.1 Specifying Additional Channels
7.2 Using a Custom Guix Channel
7.3 Replicating Guix
7.4 Channel Authentication
7.5 Channels with Substitutes
7.6 Creating a Channel
7.7 Package Modules in a Sub-directory
7.8 Declaring Channel Dependencies
7.9 Specifying Channel Authorizations
7.10 Primary URL
7.11 Writing Channel News
8 Development
8.1 Invoking guix shell
8.2 Invoking guix environment
8.3 Invoking guix pack
8.4 The GCC toolchain
8.5 Invoking guix git authenticate
9 Programming Interface
9.1 Package Modules
9.2 Defining Packages
9.2.1 package Reference
9.2.2 origin Reference
9.3 Defining Package Variants
9.4 Writing Manifests
9.5 Build Systems
9.6 Build Phases
9.7 Build Utilities
9.7.1 Dealing with Store File Names
9.7.2 File Types
9.7.3 File Manipulation
9.7.4 File Search
9.7.5 Program Invocation
9.7.6 Build Phases
9.7.7 Wrappers
9.8 Search Paths
9.9 The Store
9.10 Derivations
9.11 The Store Monad
9.12 G-Expressions
9.13 Invoking guix repl
9.14 Using Guix Interactively
10 Utilities
10.1 Invoking guix build
10.1.1 Common Build Options
10.1.2 Package Transformation Options
10.1.3 Additional Build Options
10.1.4 Debugging Build Failures
10.2 Invoking guix edit
10.3 Invoking guix download
10.4 Invoking guix hash
10.5 Invoking guix import
10.6 Invoking guix refresh
10.7 Invoking guix style
10.8 Invoking guix lint
10.9 Invoking guix size
10.10 Invoking guix graph
10.11 Invoking guix publish
10.12 Invoking guix challenge
10.13 Invoking guix copy
10.14 Invoking guix container
10.15 Invoking guix weather
10.16 Invoking guix processes
11 Foreign Architectures
11.1 Cross-Compilation
11.2 Native Builds
12 System Configuration
12.1 Using the Configuration System
Bootloader
Globally-Visible Packages
System Services
Instantiating the System
The Programming Interface
12.2 operating-system Reference
12.3 File Systems
12.3.1 Btrfs file system
12.4 Mapped Devices
12.5 Swap Space
12.6 User Accounts
12.7 Keyboard Layout
12.8 Locales
12.8.1 Locale Data Compatibility Considerations
12.9 Services
12.9.1 Base Services
12.9.2 Scheduled Job Execution
12.9.3 Log Rotation
12.9.4 Networking Setup
12.9.5 Networking Services
12.9.6 Unattended Upgrades
12.9.7 X Window
12.9.8 Printing Services
12.9.9 Desktop Services
12.9.10 Sound Services
12.9.11 File Search Services
12.9.12 Database Services
12.9.13 Mail Services
12.9.14 Messaging Services
12.9.15 Telephony Services
12.9.16 File-Sharing Services
12.9.17 Monitoring Services
12.9.18 Kerberos Services
12.9.19 LDAP Services
12.9.20 Web Services
12.9.21 Certificate Services
12.9.22 DNS Services
12.9.23 VNC Services
12.9.24 VPN Services
12.9.25 Network File System
12.9.26 Samba Services
12.9.27 Continuous Integration
12.9.28 Power Management Services
12.9.29 Audio Services
12.9.30 Virtualization Services
12.9.31 Version Control Services
12.9.32 Game Services
12.9.33 PAM Mount Service
12.9.34 Guix Services
12.9.35 Linux Services
12.9.36 Hurd Services
12.9.37 Miscellaneous Services
12.10 Setuid Programs
12.11 X.509 Certificates
12.12 Name Service Switch
12.13 Initial RAM Disk
12.14 Bootloader Configuration
12.15 Invoking guix system
12.16 Invoking guix deploy
12.17 Running Guix in a Virtual Machine
12.17.1 Connecting Through SSH
12.17.2 Using virt-viewer with Spice
12.18 Defining Services
12.18.1 Service Composition
12.18.2 Service Types and Services
12.18.3 Service Reference
12.18.4 Shepherd Services
12.18.5 Complex Configurations
13 Home Configuration
13.1 Declaring the Home Environment
13.2 Configuring the Shell
13.3 Home Services
13.3.1 Essential Home Services
13.3.2 Shells
13.3.3 Scheduled Userâ€™s Job Execution
13.3.4 Power Management Home Services
13.3.5 Managing User Daemons
13.3.6 Secure Shell
13.3.7 GNU Privacy Guard
13.3.8 Desktop Home Services
13.3.9 Guix Home Services
13.3.10 Fonts Home Services
13.3.11 Sound Home Services
13.3.12 Mail Home Services
13.3.13 Messaging Home Services
13.3.14 Media Home Services
13.3.15 Networking Home Services
13.3.16 Miscellaneous Home Services
13.4 Invoking guix home
14 Documentation
15 Platforms
15.1 platform Reference
15.2 Supported Platforms
16 Creating System Images
16.1 image Reference
16.1.1 partition Reference
16.2 Instantiate an Image
16.3 image-type Reference
16.4 Image Modules
17 Installing Debugging Files
17.1 Separate Debug Info
17.2 Rebuilding Debug Info
18 Using TeX and LaTeX
19 Security Updates
20 Bootstrapping
20.1 The Full-Source Bootstrap
20.2 Preparing to Use the Bootstrap Binaries
Building the Build Tools
Building the Bootstrap Binaries
Reducing the Set of Bootstrap Binaries
21 Porting to a New Platform
22 Contributing
22.1 Building from Git
22.2 Running Guix Before It Is Installed
22.3 The Perfect Setup
22.3.1 Viewing Bugs within Emacs
22.4 Alternative Setups
22.4.1 Guile Studio
22.4.2 Vim and NeoVim
22.5 Packaging Guidelines
22.5.1 Software Freedom
22.5.2 Package Naming
22.5.3 Version Numbers
22.5.4 Synopses and Descriptions
22.5.5 Snippets versus Phases
22.5.6 Cyclic Module Dependencies
22.5.7 Emacs Packages
22.5.8 Python Modules
22.5.8.1 Specifying Dependencies
22.5.9 Perl Modules
22.5.10 Java Packages
22.5.11 Rust Crates
22.5.12 Elm Packages
22.5.13 Fonts
22.6 Coding Style
22.6.1 Programming Paradigm
22.6.2 Modules
22.6.3 Data Types and Pattern Matching
22.6.4 Formatting Code
22.7 Submitting Patches
22.7.1 Configuring Git
22.7.2 Sending a Patch Series
Single Patches
Notifying Teams
Multiple Patches
22.7.3 Teams
22.8 Tracking Bugs and Changes
22.8.1 The Issue Tracker
22.8.2 Managing Patches and Branches
22.8.3 Debbugs User Interfaces
22.8.3.1 Web interface
22.8.3.2 Command-line interface
22.8.3.3 Emacs interface
22.8.4 Debbugs Usertags
22.9 Commit Access
22.9.1 Applying for Commit Access
22.9.2 Commit Policy
22.9.3 Addressing Issues
22.9.4 Commit Revocation
22.9.5 Helping Out
22.10 Updating the Guix Package
22.11 Writing Documentation
22.12 Translating Guix
23 Acknowledgments
Appendix A GNU Free Documentation License
Concept Index
Programming Index
