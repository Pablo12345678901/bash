1 Introduction
1.1 Managing Software the Guix Way
1.2 GNU Distribution
2 Installation
2.1 Binary Installation
2.2 Requirements
2.3 Running the Test Suite
2.4 Setting Up the Daemon
2.4.1 Build Environment Setup
2.4.2 Using the Offload Facility
2.4.3 SELinux Support
2.4.3.1 Installing the SELinux policy
2.4.3.2 Limitations
2.5 Invoking guix-daemon
2.6 Application Setup
2.6.1 Locales
2.6.2 Name Service Switch
2.6.3 X11 Fonts
2.6.4 X.509 Certificates
2.6.5 Emacs Packages
2.7 Upgrading Guix
3 System Installation
3.1 Limitations
3.2 Hardware Considerations
3.3 USB Stick and DVD Installation
Copying to a USB Stick
Burning on a DVD
Booting
3.4 Preparing for Installation
3.5 Guided Graphical Installation
3.6 Manual Installation
3.6.1 Keyboard Layout, Networking, and Partitioning
3.6.1.1 Keyboard Layout
3.6.1.2 Networking
3.6.1.3 Disk Partitioning
3.6.2 Proceeding with the Installation
3.7 After System Installation
3.8 Installing Guix in a Virtual Machine
3.9 Building the Installation Image
3.10 Building the Installation Image for ARM Boards
4 Getting Started
5 Package Management
5.1 Features
5.2 Invoking guix package
5.3 Substitutes
5.3.1 Official Substitute Servers
5.3.2 Substitute Server Authorization
5.3.3 Getting Substitutes from Other Servers
5.3.4 Substitute Authentication
5.3.5 Proxy Settings
5.3.6 Substitution Failure
5.3.7 On Trusting Binaries
5.4 Packages with Multiple Outputs
5.5 Invoking guix locate
5.6 Invoking guix gc
5.7 Invoking guix pull
5.8 Invoking guix time-machine
5.9 Inferiors
5.10 Invoking guix describe
5.11 Invoking guix archive
6 Channels
6.1 Specifying Additional Channels
6.2 Using a Custom Guix Channel
6.3 Replicating Guix
6.4 Channel Authentication
6.5 Channels with Substitutes
6.6 Creating a Channel
6.7 Package Modules in a Sub-directory
6.8 Declaring Channel Dependencies
6.9 Specifying Channel Authorizations
6.10 Primary URL
6.11 Writing Channel News
7 Development
7.1 Invoking guix shell
7.2 Invoking guix environment
7.3 Invoking guix pack
7.4 The GCC toolchain
7.5 Invoking guix git authenticate
8 Programming Interface
8.1 Package Modules
8.2 Defining Packages
8.2.1 package Reference
8.2.2 origin Reference
8.3 Defining Package Variants
8.4 Writing Manifests
8.5 Build Systems
8.6 Build Phases
8.7 Build Utilities
8.7.1 Dealing with Store File Names
8.7.2 File Types
8.7.3 File Manipulation
8.7.4 File Search
8.7.5 Program Invocation
8.7.6 Build Phases
8.7.7 Wrappers
8.8 Search Paths
8.9 The Store
8.10 Derivations
8.11 The Store Monad
8.12 G-Expressions
8.13 Invoking guix repl
8.14 Using Guix Interactively
9 Utilities
9.1 Invoking guix build
9.1.1 Common Build Options
9.1.2 Package Transformation Options
9.1.3 Additional Build Options
9.1.4 Debugging Build Failures
9.2 Invoking guix edit
9.3 Invoking guix download
9.4 Invoking guix hash
9.5 Invoking guix import
9.6 Invoking guix refresh
9.7 Invoking guix style
9.8 Invoking guix lint
9.9 Invoking guix size
9.10 Invoking guix graph
9.11 Invoking guix publish
9.12 Invoking guix challenge
9.13 Invoking guix copy
9.14 Invoking guix container
9.15 Invoking guix weather
9.16 Invoking guix processes
10 Foreign Architectures
10.1 Cross-Compilation
10.2 Native Builds
11 System Configuration
11.1 Using the Configuration System
Bootloader
Globally-Visible Packages
System Services
Instantiating the System
The Programming Interface
11.2 operating-system Reference
11.3 File Systems
11.3.1 Btrfs file system
11.4 Mapped Devices
11.5 Swap Space
11.6 User Accounts
11.7 Keyboard Layout
11.8 Locales
11.8.1 Locale Data Compatibility Considerations
11.9 Services
11.9.1 Base Services
11.9.2 Scheduled Job Execution
11.9.3 Log Rotation
11.9.4 Networking Setup
11.9.5 Networking Services
11.9.6 Unattended Upgrades
11.9.7 X Window
11.9.8 Printing Services
11.9.9 Desktop Services
11.9.10 Sound Services
11.9.11 File Search Services
11.9.12 Database Services
11.9.13 Mail Services
11.9.14 Messaging Services
11.9.15 Telephony Services
11.9.16 File-Sharing Services
11.9.17 Monitoring Services
11.9.18 Kerberos Services
11.9.19 LDAP Services
11.9.20 Web Services
11.9.21 Certificate Services
11.9.22 DNS Services
11.9.23 VNC Services
11.9.24 VPN Services
11.9.25 Network File System
11.9.26 Samba Services
11.9.27 Continuous Integration
11.9.28 Power Management Services
11.9.29 Audio Services
11.9.30 Virtualization Services
11.9.31 Version Control Services
11.9.32 Game Services
11.9.33 PAM Mount Service
11.9.34 Guix Services
11.9.35 Linux Services
11.9.36 Hurd Services
11.9.37 Miscellaneous Services
11.10 Setuid Programs
11.11 X.509 Certificates
11.12 Name Service Switch
11.13 Initial RAM Disk
11.14 Bootloader Configuration
11.15 Invoking guix system
11.16 Invoking guix deploy
11.17 Running Guix in a Virtual Machine
11.17.1 Connecting Through SSH
11.17.2 Using virt-viewer with Spice
11.18 Defining Services
11.18.1 Service Composition
11.18.2 Service Types and Services
11.18.3 Service Reference
11.18.4 Shepherd Services
11.18.5 Complex Configurations
12 System Troubleshooting Tips
12.1 Chrooting into an existing system
13 Home Configuration
13.1 Declaring the Home Environment
13.2 Configuring the Shell
13.3 Home Services
13.3.1 Essential Home Services
13.3.2 Shells
13.3.3 Scheduled Userâ€™s Job Execution
13.3.4 Power Management Home Services
13.3.5 Managing User Daemons
13.3.6 Secure Shell
13.3.7 GNU Privacy Guard
13.3.8 Desktop Home Services
13.3.9 Guix Home Services
13.3.10 Fonts Home Services
13.3.11 Sound Home Services
13.3.12 Mail Home Services
13.3.13 Messaging Home Services
13.3.14 Media Home Services
13.3.15 Networking Home Services
13.3.16 Miscellaneous Home Services
13.4 Invoking guix home
14 Documentation
15 Platforms
15.1 platform Reference
15.2 Supported Platforms
16 Creating System Images
16.1 image Reference
16.1.1 partition Reference
16.2 Instantiate an Image
16.3 image-type Reference
16.4 Image Modules
17 Installing Debugging Files
17.1 Separate Debug Info
17.2 Rebuilding Debug Info
18 Using TeX and LaTeX
19 Security Updates
20 Bootstrapping
20.1 The Full-Source Bootstrap
20.2 Preparing to Use the Bootstrap Binaries
Building the Build Tools
Building the Bootstrap Binaries
Reducing the Set of Bootstrap Binaries
21 Porting to a New Platform
22 Contributing
22.1 Building from Git
22.2 Running Guix Before It Is Installed
22.3 The Perfect Setup
22.3.1 Viewing Bugs within Emacs
22.4 Alternative Setups
22.4.1 Guile Studio
22.4.2 Vim and NeoVim
22.5 Packaging Guidelines
22.5.1 Software Freedom
22.5.2 Package Naming
22.5.3 Version Numbers
22.5.4 Synopses and Descriptions
22.5.5 Snippets versus Phases
22.5.6 Cyclic Module Dependencies
22.5.7 Emacs Packages
22.5.8 Python Modules
22.5.8.1 Specifying Dependencies
22.5.9 Perl Modules
22.5.10 Java Packages
22.5.11 Rust Crates
22.5.12 Elm Packages
22.5.13 Fonts
22.6 Coding Style
22.6.1 Programming Paradigm
22.6.2 Modules
22.6.3 Data Types and Pattern Matching
22.6.4 Formatting Code
22.7 Submitting Patches
22.7.1 Configuring Git
22.7.2 Sending a Patch Series
Single Patches
Notifying Teams
Multiple Patches
22.7.3 Teams
22.8 Tracking Bugs and Changes
22.8.1 The Issue Tracker
22.8.2 Managing Patches and Branches
22.8.3 Debbugs User Interfaces
22.8.3.1 Web interface
22.8.3.2 Command-line interface
22.8.3.3 Emacs interface
22.8.4 Debbugs Usertags
22.8.5 Cuirass Build Notifications
22.9 Commit Access
22.9.1 Applying for Commit Access
22.9.2 Commit Policy
22.9.3 Addressing Issues
22.9.4 Commit Revocation
22.9.5 Helping Out
22.10 Reviewing the Work of Others
22.11 Updating the Guix Package
22.12 Writing Documentation
22.13 Translating Guix
23 Acknowledgments
Appendix A GNU Free Documentation License
Concept Index
Programming Index