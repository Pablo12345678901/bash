#!/usr/bin/env bash
source fonctions_personnelles

# Ce script ouvrira l'app TextEditor de MacOs si je valide l'ouverture du fichier.
# Il n'est donc pas portable en dehors de MacOs.
# Ligne à remplacer si run dans un autre environnement :
#    { open -a TextEdit $PATH_DU_FICHIER &&

# Types de mots traités :
# - alias -> aucun alias dans mon environnement actuel donc pas traité dans ce script
# - builtins -> contenu de "help NOM"
# - commands (type files) -> seul le contenu de "man NOM" est traité (pas "help NOM" ni "info NOM")
# - functions -> aucune fonction dans mon environnement actuel donc pas traité dans ce script
# - keywords -> pas d'informations disponibles

# Remarques diverses :
# Ce message peut être ignoré : 
#This manpage is not compatible with mandoc(1) and might display incorrectly.
# Il annonce que ce n'est pas une page de manuel typique mais la copie des sections
# fonctionne et peut donc être ignorée.

: <<-EXPLICATIONS_SUR_COMPGEN
compgen -a # will list all the aliases you could run.
compgen -b # will list all the built-ins you could run.
compgen -c # will list all the commands you could run.
compgen -k # will list all the keywords you could run.
compgen -A function # will list all the functions you could run.
compgen -A function -abck # will list all the above in one go.
EXPLICATIONS_SUR_COMPGEN

function redaction_message_erreur_dans_fichier {
    local -n CMD="$1"
    local -n FCH="$2"
    # $1 = commande entre guillemets simple
    # $2 = fichier entre guillemets simple
    # Rédaction des informations dans le fichier
    echo -e "\"$CMD\" : " >> $FCH
    TYPE_COMMANDE="$(type -t "$CMD")"
    echo -e "\tLa commande \"$CMD\" de type \"$TYPE_COMMANDE\" ne possède pas de page manuel dédiée."  >> $NOM_FICHIER_DE_STOCKAGE_INFORMATIONS
    echo -e "\tTapez \"help $CMD\", \"info $CMD\" ou \"$CMD\" pour essayer d'obtenir davantage d'informations."  >> $NOM_FICHIER_DE_STOCKAGE_INFORMATIONS
    echo "" >> $FCH
}



# Fichier de stockage des données
NOM_FICHIER_DE_STOCKAGE_INFORMATIONS='commandes_bash_liste_et_description.txt'

QUESTION="Voudriez-vous ouvrir le fichier (OoYy/Nn) ? "
REPONSE=""

question_oui_non REPONSE "$QUESTION"
if [ $REPONSE = 'o' ]
then
    PATH_DU_FICHIER="$REPERTOIRE_DES_COMMANDES_PERSO/$NOM_FICHIER_DE_STOCKAGE_INFORMATIONS"
    { open -a TextEdit $PATH_DU_FICHIER &&
    echo -e "\nOuverture du fichier ${NOM_FICHIER_DE_STOCKAGE_INFORMATIONS@Q}.\n" ; } ||
    echo -e "\nERREUR : le fichier ${NOM_FICHIER_DE_STOCKAGE_INFORMATIONS@Q} situé $PATH_DU_FICHIER n'a pas pu être ouvert.\n"
    exit 0
else
    :
fi

QUESTION="Êtes-vous sûr de vouloir lancer ce (long) script pour recharger les données ?
Il dure environ 5 minutes... (OoYy/Nn) ? "
REPONSE=""
question_oui_non REPONSE "$QUESTION"
if [ $REPONSE = 'o' ]
then
    echo ""
    :
else
    echo -e "\nVous quittez sans lancer le (long) script.\n"
    exit 0
fi


# Récupération de toutes les commandes bash brutes (non triées)
declare -a TABLEAU_DE_COMMANDE_BASH # tableau des commandes 
while IFS= read -r # pour ajouter un délimiteur, ajouter -d 'CHARDELIMITEUR'
# 'IFS=' préserve les éventuels espaces avant et après l'élément
do
   TABLEAU_DE_COMMANDE_BASH+=("$REPLY") # reply est la variable dans laquelle est stockée le résultat si aucune variable n'est fournie
done < <(compgen -A function -abck | sort -fu)
# compgen : cf aussi ci-dessus : Liste tout les types : aliases / builtins / commands / files / functions / keywords
# sort -f : ignore la case pour le tri
# sort -u : supprime éventuels doublons

# Rédaction entête du fichier
cd $REPERTOIRE_DES_COMMANDES_PERSO # aller dans le bon répertoire 
NB_MOTS_MINIMUM_PR_AFFICHAGE=3
NB_LIGNES_APRES_MATCH=10
echo "Bash :" > $NOM_FICHIER_DE_STOCKAGE_INFORMATIONS # effacement contenu précédemment enregistré
echo "- Liste des aliases, builtins, commands (=files), functions et keywords et informations." >> $NOM_FICHIER_DE_STOCKAGE_INFORMATIONS 
echo "- Les sections NAME et DESCRIPTION sont affichées pour chaque commande si celles-ci dépassent $NB_MOTS_MINIMUM_PR_AFFICHAGE mots." >> $NOM_FICHIER_DE_STOCKAGE_INFORMATIONS
echo "" >> $NOM_FICHIER_DE_STOCKAGE_INFORMATIONS

# Gestion de l'avancement
TAILLE_TABLEAU_COMMANDE_BASH=${#TABLEAU_DE_COMMANDE_BASH[@]}
NUM_COMMANDE_BASH_EN_COURS=0

echo "Nombre de mots utilisés par le shell Bash : $TAILLE_TABLEAU_COMMANDE_BASH"
for COMMANDE in "${TABLEAU_DE_COMMANDE_BASH[@]}"
do
    # Ajout de pourcentage d'avancement de la tâche
    ((++NUM_COMMANDE_BASH_EN_COURS)) # Avancement d'un à chaque tour de boucle
    POURCENTAGE_AVANCEMENT="$(awk -v a=$NUM_COMMANDE_BASH_EN_COURS -v b=$TAILLE_TABLEAU_COMMANDE_BASH 'BEGIN {printf "%6.2f\n", 100*a/b }')"
    NUMERO_COMMANDE_BASH_EN_COURS="$(awk -v numencours=$NUM_COMMANDE_BASH_EN_COURS 'BEGIN {printf "%5.0f\n", numencours }')" # pour un affichage optimisé
    echo "$POURCENTAGE_AVANCEMENT% - $NUMERO_COMMANDE_BASH_EN_COURS/$TAILLE_TABLEAU_COMMANDE_BASH - \"$COMMANDE\"" # pour montrer avancement
    
    # Gestion selon si le type est un fichier et si celui-ci possède une page de manuel dédiée
    if [ "$(type -t "$COMMANDE")" = 'file' ]
    then
        man "$COMMANDE" > /dev/null 2>&1 # test s'il y a une page du manuel dédiée à la commande.
        
        # Tri de celles qui possède de l'information du manuel ou pas et rédaction selon résultat
        if (($?))
        then
            redaction_message_erreur_dans_fichier COMMANDE NOM_FICHIER_DE_STOCKAGE_INFORMATIONS
        else
            # Transformation des 2 section name et description (suppression du titre de section, récupération du paragraphe et suppression d'espace avant / après celui-ci)
            # Section NAME
            SECTION_NAME="$(grep -m 1 -A $NB_LIGNES_APRES_MATCH 'NAME' < <(man "$COMMANDE" | col -bx ))"
            # grep -m : le nombre max de match avant que grep s'arrête de rechercher
            # grep -A : le nb de ligne après le match à afficher
            PARAGRAPHE_NAME="$(awk '/NAME/ { indic=1 ; getline ; } { if (indic == 1) { print $0} } /^$/ { indic=0 }' <<< $SECTION_NAME )"
            PARAGRAPHE_SANS_ESPACE_DEBUT_FIN_NAME="$(sed -e 's/[[:space:]]*$//' -e 's/^[[:space:]]*//' <<< $PARAGRAPHE_NAME)"
            PARAGRAPHE_SANS_RETOUR_LIGNE_NAME="$(echo "$PARAGRAPHE_SANS_ESPACE_DEBUT_FIN_NAME" | tr '\n' ' ')"
            PARAGRAPHE_NAME_FINAL="$(echo "$PARAGRAPHE_SANS_RETOUR_LIGNE_NAME")" # pour simplifier le nom de variable pour la rédaction ensuite
            # Section DESCRIPTION
            SECTION_DESCRIPTION="$(grep -m 1 -A $NB_LIGNES_APRES_MATCH 'DESCRIPTION' < <(man "$COMMANDE" | col -bx ))"
            PARAGRAPHE_DESCRIPTION="$(awk '/DESCRIPTION/ { indic=1 ; getline ; } { if (indic == 1) { print $0} } /^$/ { indic=0 }' <<< $SECTION_DESCRIPTION )"
            PARAGRAPHE_SANS_ESPACE_DEBUT_FIN_DESCRIPTION="$(sed -e 's/[[:space:]]*$//' -e 's/^[[:space:]]*//' <<< $PARAGRAPHE_DESCRIPTION)"
            PARAGRAPHE_SANS_RETOUR_LIGNE_DESCRIPTION="$(echo "$PARAGRAPHE_SANS_ESPACE_DEBUT_FIN_DESCRIPTION" | tr '\n' ' ')"
            PARAGRAPHE_DESCRIPTION_FINAL="$(echo "$PARAGRAPHE_SANS_RETOUR_LIGNE_DESCRIPTION")" # pour simplifier le nom de variable pour la rédaction ensuite
            # Fin transformation des 2 sections

            # Rédaction des informations dans le fichier
            echo -e "\"$COMMANDE\" : " >> $NOM_FICHIER_DE_STOCKAGE_INFORMATIONS 
            # Rédaction du paragraphe NAME que si plus de X mots
            NB_MOT_DS_NAME=$(echo "$PARAGRAPHE_NAME_FINAL" | tr " " "\n" | grep -c $ )
            if [ $NB_MOT_DS_NAME -lt $NB_MOTS_MINIMUM_PR_AFFICHAGE ]
            then
                :
            else
                echo -e "\tNAME :"  >> $NOM_FICHIER_DE_STOCKAGE_INFORMATIONS
                { echo -e "\t\t$PARAGRAPHE_NAME_FINAL" ; } | fmt  >> $NOM_FICHIER_DE_STOCKAGE_INFORMATIONS
            fi
            # Rédaction du paragraphe DESCRIPTION que si plus de X mots
            NB_MOT_DS_DESCRIPTION=$(echo "$PARAGRAPHE_DESCRIPTION_FINAL" | tr " " "\n" | grep -c $ )
            if [ $NB_MOT_DS_DESCRIPTION -lt $NB_MOTS_MINIMUM_PR_AFFICHAGE ]
            then
                :
            else
                echo -e "\tDESCRIPTION :"  >> $NOM_FICHIER_DE_STOCKAGE_INFORMATIONS
                { echo -e "\t\t$PARAGRAPHE_DESCRIPTION_FINAL" ; } | fmt  >> $NOM_FICHIER_DE_STOCKAGE_INFORMATIONS
            fi
            echo "" >> $NOM_FICHIER_DE_STOCKAGE_INFORMATIONS
        fi
    elif [ "$(type -t "$COMMANDE")" = 'builtin' ]
    then
        help "$COMMANDE" > /dev/null 2>&1 # test s'il y a une page du manuel dédiée à la commande.
        # Tri de celles qui possède de l'information du manuel ou pas et rédaction selon résultat
        if (($?))
        then
            redaction_message_erreur_dans_fichier COMMANDE NOM_FICHIER_DE_STOCKAGE_INFORMATIONS
        else
            # Récupération et mise en forme du contenu souhaité
            SECTION_BUILTIN="$(grep -m 1 -A 10 "$COMMANDE" < <(help "$COMMANDE" | col -bx ))"
            DEUX_PREMIER_PARAGRAPHES_BUILTIN="$(awk -v NOM_COMMANDE=$COMMANDE: ' { if ($0 ~ NOM_COMMANDE  || $0 ~ /^$/ ) { indic++; getline ; }} { if (indic<3) { print $0} } ' <<< $SECTION_BUILTIN )"
            DEUX_PREMIER_PARAGRAPHES_SANS_TABULATIONS_BUILTIN="$(sed -e 's/^[\t]*//' <<< $DEUX_PREMIER_PARAGRAPHES_BUILTIN)"
            DEUX_PARAGRAPHES_SANS_ESPACE_DEBUT_FIN_BUILTIN="$(sed -e 's/[[:space:]]*$//' -e 's/^[[:space:]]*//' <<< $DEUX_PREMIER_PARAGRAPHES_SANS_TABULATIONS_BUILTIN)"
            PARAGRAPHE_SANS_RETOUR_LIGNE_BUILTIN="$(echo "$DEUX_PARAGRAPHES_SANS_ESPACE_DEBUT_FIN_BUILTIN" | tr '\n' ' ' )"
            PARAGRAPHE_FINAL_BUILTIN="$PARAGRAPHE_SANS_RETOUR_LIGNE_BUILTIN"
            # Rédaction dans le fichier
            echo -e "\"$COMMANDE\" : " >> $NOM_FICHIER_DE_STOCKAGE_INFORMATIONS
            echo -e "\tDESCRIPTION :"  >> $NOM_FICHIER_DE_STOCKAGE_INFORMATIONS
            { echo -e "\t\t$PARAGRAPHE_FINAL_BUILTIN" ; } | fmt  >> $NOM_FICHIER_DE_STOCKAGE_INFORMATIONS
            echo "" >> $NOM_FICHIER_DE_STOCKAGE_INFORMATIONS
        fi
    else
        redaction_message_erreur_dans_fichier COMMANDE NOM_FICHIER_DE_STOCKAGE_INFORMATIONS
    fi
done

echo "Fin de la rédaction du fichier : ${NOM_FICHIER_DE_STOCKAGE_INFORMATIONS@Q}."
# Retour au répertoire d'origine
cd $OLDPWD