#!/usr/bin/env bash

# Syntaxe :
# $1 : NB_LIGNE_ESPACE (optionnel)

# Adapter ici le nombre de ligne vide par défaut si non défini.
NB_LIGNE_ESPACE_PAR_DEFAUT=10

# Contrôle qu'un argument a été fourni au script
if [ -z "$1" ]
# $1 : le nombre de ligne vide à printer avant de relancer la précédente commande.
then
    # Nb d'espace par défaut, si pas de nb d'espace fourni.
    NB_LIGNE_ESPACE=$NB_LIGNE_ESPACE_PAR_DEFAUT
    echo -e "\nAucun argument fourni."
    echo "Fonctionnement par défaut :"
    echo "Relancement de la commande précédente avec $NB_LIGNE_ESPACE lignes vides avant."
else
    # Test si entier plus grand que 0
    re='^[1-9]+[0-9]*$'
    if [[ $1 =~ $re ]] # si l'argument fourni est un nombre
    then
        NB_LIGNE_ESPACE=$1
        echo -e "\nRelancement de la commande précédente avec $NB_LIGNE_ESPACE lignes d'espaces avant."
        
    else
        # Nb d'espace par défaut, si mauvais argument fourni.
        NB_LIGNE_ESPACE=$NB_LIGNE_ESPACE_PAR_DEFAUT
        echo -e "\nERREUR : l'argument \"$1\" fourni n'est pas un nombre > 0."
        echo "Fonctionnement par défaut :"
        echo "Relancement de la commande précédente avec $NB_LIGNE_ESPACE lignes vides avant."
    fi
fi

# Imprime NB_LIGNE_ESPACE avant de relancer la commande précédente
espace_print_nb $NB_LIGNE_ESPACE

# Obtention de la dernière commande
DERNIERE_COMMANDE="$(commande_derniere_obtenir)"
# Retrait des guillemets de début et fin
DERNIERE_COMMANDE="$(echo "$DERNIERE_COMMANDE" | sed -e "s/'$//" )"
DERNIERE_COMMANDE="$(echo "$DERNIERE_COMMANDE" | sed -e "s/^'//" )"

# Run de la dernière commande
eval ${DERNIERE_COMMANDE[*]}

