#!/usr/bin/env bash

# Syntaxe :
# $1 : COMMANDE : string éventuellement (si requis) arguments entre guillemets simples/doubles
# $... : ARGUMENT_OPTIONNELS (optionnel) string éventuellement (si requis) arguments entre guillemets simples/doubles
# $DERNIER : '-inc=PLUS_OU_MOINS_INCREMENT' (optionnel) '-inc' suivi de '=' suivi d'un nombre entre -20 et +19
# Remarques :
# Pour accélérer un processus, il faut lui faire passer un incrément négatif.
# Le maximum d'accélération est -20. Le minimum est +19.
# Par défaut, un processus possède un 'nice' de 0 (cf 'man nice').

# Fonctionnement :
# Le script va runner la commande en arrière plan tout en redirigeant l'output vers un fichier dans la corbeille (pour éventuelle lecture).
# Un fois la commande runnée, il va en modifier la priorité.
# Si elle doit être accru, il faudra sudo et donc saisir le mot de passe.

# Améliorations possibles :
# Accepter plusieurs commandes avec des points virgules (ils font bugguer d'autres commandes perso).

source fonctions_personnelles

SYNTAXE="\nSyntaxe :\n\t$(basename $0)    COMMANDE    [ARGUMENT_OPTIONNELS ...]    [-inc=PLUS_OU_MOINS_INCREMENT]\n"
NOM_OUTPUT_CORBEILLE="$(basename $0)_output.txt"
FICHIER_OUTPUT_CORBEILLE=~/.Trash/$NOM_OUTPUT_CORBEILLE
# Gestion des regexs utilisé pour vérifié si le dernier argument est syntaxé comme un incrément
# et si c'est le cas si sa dernière partie (après le 'égal') contient un nombre
# Ici nb entier inclus entre -29 et +29
REGEX_NB_ENTIER_POSITIF_OU_NEGATIF="^[+-]?[0-2]{1}[0-9]?$"
REGEX_INCREMENT_EGAL_NB="^-inc=[+-]?[0-2]{1}[0-9]?$"
# [] : liste d'items pouvant matcher (un seul de la liste)
# ? : match 0 ou 1 fois
# {1} : match exactement une fois


# Contrôle des arguments
declare -a TABLEAU_ARGUMENT
# Test si au moins un argument.
if [ -z "$1" ]
then
    echo -e "\nERREUR : aucun argument fourni."
    echo -e "$SYNTAXE"
    exit 1
else
    # Stockage des argument dans un tableau sauf le dernier pour lequel
    # Il faut contrôler s'il est syntaxé comme un incrément, sinon il sera considéré comme un argument de plus.
    NB_ARGUMENT=$#
    INDEX_DERNIER_ARGUMENT=$((NB_ARGUMENT))
    DERNIER_ARGUMENT="${!INDEX_DERNIER_ARGUMENT}"
    for ((i=1; i<$((NB_ARGUMENT)); i++))
    do
        TABLEAU_ARGUMENTS+=("${!i}")
    done
    
    # Si dernier argument match '-increment=NB' alors considéré comme increment.
    # Sinon considéré comme un argument.
    if [[ "$DERNIER_ARGUMENT" =~ $REGEX_INCREMENT_EGAL_NB ]]
    then
        INCREMENT="$(echo "$DERNIER_ARGUMENT" | awk -F = ' { print $2} ')"
        # Si un incrément est présent, il doit matcher le REGEX (nombre entre -29 et +29)
        if [[ "$INCREMENT" =~ $REGEX_NB_ENTIER_POSITIF_OU_NEGATIF ]] &&
        # Et s'il matche, contrôle s'il est inclus entre les extremums (-20 et +19)
        [[ $((INCREMENT)) -ge -20 && $((INCREMENT)) -le 19 ]]
        then
            : # OK continue script
        else
            echo -e "\nERREUR : le deuxième argument \"$INCREMENT\" n'est pas un nombre inclus entre -20 et +19 (avec signe éventuel)."
            echo -e "$SYNTAXE"
            exit 1
        fi
    else
        # Sinon, le dernier argument est considéré comme un argument et non comme un incrément
        # Par défaut, si pas précisé, l'incrément est -20 (priorisation maximum).
        INCREMENT="-20"
        TABLEAU_ARGUMENTS+=("$DERNIER_ARGUMENT")
    fi
fi

# Préparation de la commande en concaténant les arguments.
# Conservation de la commande réelement typée (COMMANDE) et celle qui sera dans les processus (COMMANDE_TRANSFORMEE).
# Car si dans la commande, une commande personnelle est appelé, elle sera remplacé par son path.
COMMANDE=""
COMMANDE_TRANSFORMEE=""
for ELEMENT in "${TABLEAU_ARGUMENTS[@]}"
do
    # Contrôle pour chaque élément si c'est une commande du répertoire personnel
    # Car dans les processus, ce sera le path de la commande qui y sera
    # et son la commande elle-même.
    PATH_ELEMENT="$(which "$ELEMENT")"
    # Si c'est une commande 'personnelle'
    if [[ "$PATH_ELEMENT" =~ $REPERTOIRE_DES_COMMANDES_PERSO ]]
    then
        # Je la remplace par son path.
        ELEMENT_TRANSFORME="$PATH_ELEMENT"
    else
        ELEMENT_TRANSFORME="$ELEMENT"
    fi
    # Puis ajout des éléments séparés par un espace
    COMMANDE="${COMMANDE}${ELEMENT} "
    COMMANDE_TRANSFORMEE="${COMMANDE_TRANSFORMEE}${ELEMENT_TRANSFORME} "
done

# Suppression du dernier espace ajouté artificiellement
COMMANDE="$(echo "$COMMANDE" | sed -e 's/[[:space:]]*$//' )"
COMMANDE_TRANSFORMEE="$(echo "$COMMANDE_TRANSFORMEE" | sed -e 's/[[:space:]]*$//' )"

# Lancement de la commande en arrière plan pour permettre le reste du script de fonctionner
TEMPS_D_ATTENTE_ENTRE_MESSAGE_ET_LANCEMENT=1
echo -e "\nLancement de la commande \"$COMMANDE\" dans $TEMPS_D_ATTENTE_ENTRE_MESSAGE_ET_LANCEMENT secondes.\n"
echo -e "Une copie de l'output de la commande a été placée dans la corbeille sous le nom de \"$NOM_OUTPUT_CORBEILLE\".\n"
sleep $TEMPS_D_ATTENTE_ENTRE_MESSAGE_ET_LANCEMENT

# Sortie redirigée vers le fichier de la corbeille
$COMMANDE_TRANSFORMEE > $FICHIER_OUTPUT_CORBEILLE 2>&1 & # l'output placé dans un fichier dans la corbeille
# car sinon, je ne peux pas sudo en fournissant le MDP et donc je ne peux pas modifier la priorité (l'améliorer.)

# Recherche du numéro de processus (PID) correspondant à la commande lancée
# Récupère le PID de la commande
REGEX_COMMANDE="^.*$COMMANDE_TRANSFORMEE.*$"
REGEX_DE_RECHERCHE_PAR_GREP="^.*grep -E.*$REGEX_COMMANDE.*$" # Doit être adapté si l'appel de grep ci-dessous venait à changer

# Remplissage du tableau des processus (PID) concerné
# Il peut en avoir plusieurs si un processus en lance d'autres.
declare -a TABLEAU_PROCESSUS_A_ACCELERER
while read LIGNE_PROCESSUS
do
    PID_COMMANDE="$(echo "$LIGNE_PROCESSUS" | awk ' { print $2 } ' )" # la deuxième colonne est le PID
    TABLEAU_PROCESSUS_A_ACCELERER+=("$PID_COMMANDE")
done < <(   ps -Al |
            # ps -A : obtient la liste de tous les processus
            # ps -l : liste les processus avec les principales colonnes
            grep -E "$REGEX_COMMANDE" | # recherche des lignes qui contiennent la commande
            # grep -E : extended regex
            grep -E -v "$REGEX_DE_RECHERCHE_PAR_GREP" ) # supprime éventuellement la recherche par grep effectué ci-dessus et ici

# Test s'il y a effectivement toujours ce processus actif (le tableau peut être vide si la commande grep n'a rien trouvé 
if [ ${#TABLEAU_PROCESSUS_A_ACCELERER[@]} -eq 0 ]
then
    echo -e "\nLa commande :\n$COMMANDE\nest déjà terminée. Il n'est plus nécessaire de modifier sa priorité.\n"
else
    declare -a TABLEAU_FLAG_ETAT_REUSSITE
    for CHAQUE_PID in "${TABLEAU_PROCESSUS_A_ACCELERER[@]}"
    do
        # Adaptation de la priorité du processus
        if [ $((INCREMENT)) -lt 0 ]
        then
            # Pour une diminution (priorisation du processus), besoin d'être root sinon c'est refusé.
            sudo renice -n "$INCREMENT" "$CHAQUE_PID" 2>/dev/null && # redirection des messages d'erreur éventuel car je les gère différemment
            # Récupération de l'état pour chaque processus
            TABLEAU_FLAG_ETAT_REUSSITE+=("true") &&
            echo -e "$MESSAGE_REUSSITE" ||
            TABLEAU_FLAG_ETAT_REUSSITE+=("false")
        else
            # Pour une augmentation (dé-priorisation du processus), pas besoin d'être root.
            renice -n "$INCREMENT"  "$CHAQUE_PID" 2>/dev/null && # redirection des messages d'erreur éventuel car je les gère différemment
            # Récupération de l'état pour chaque processus + affichage message si ok
            TABLEAU_FLAG_ETAT_REUSSITE+=("true") &&
            echo -e "$MESSAGE_REUSSITE" ||
            TABLEAU_FLAG_ETAT_REUSSITE+=("false")
        fi
        
    done

    # Affichage des messages réussite / échec que si les processus sont encore là
    MESSAGE_REUSSITE="\nLa priorité (niceness) de la commande :\n\t$COMMANDE\n\tPID : $PID_PROCESSUS_COURANT\na été modifiée de $INCREMENT.\n"
    MESSAGE_ECHEC="\nÉCHEC : La priorité (niceness) de la commande :\n\t$COMMANDE\n\tPID : $PID_PROCESSUS_COURANT\nn'a pas pu être modifiée de $INCREMENT.\n"
    # Conservation des lignes des PID qui sont encore actifs pour affichage final
    declare -a TABLEAU_LIGNES_A_AFFICHER
    COMPTEUR_D_ERREUR=0
    for INDEX in "${!TABLEAU_PROCESSUS_A_ACCELERER[@]}"
    do
        PID_PROCESSUS_COURANT="${TABLEAU_PROCESSUS_A_ACCELERER[$INDEX]}"
        LIGNE_A_AFFICHER=""
        while read LIGNE
        do
            NUM_PID_LIGNE="$(echo "$LIGNE" | awk ' { print $2 } ' )"
            # Si le processus est effectivement encore là
            if [ "$NUM_PID_LIGNE" = "$PID_PROCESSUS_COURANT" ]
            then
                # Conservation des lignes des PID qui sont encore actifs pour affichage final
                TABLEAU_LIGNES_A_AFFICHER+=("$LIGNE")
                # TEST flag
                if [ "${TABLEAU_FLAG_ETAT_REUSSITE[$INDEX]}" = "true" ]
                then
                    echo -e "$MESSAGE_REUSSITE"
                else
                    echo -e "$MESSAGE_ECHEC"
                    ((COMPTEUR_D_ERREUR++))
                fi
                break # passage au prochain PID
            else
                :
            fi
        done < <(ps -Al | grep "$PID_PROCESSUS_COURANT") # recherche des lignes qui matche le PID
    done

    # Affichage de l'état final des processus modifiés
    # Que s'il y a qqch à afficher
    if [ ${#TABLEAU_LIGNES_A_AFFICHER[@]} -gt 0 ]
    then
        echo -e "Affichage du nouvel état :"
        # Affichage de l'entête
        LIGNE_D_ENTETE="$(ps -Al | head -n 1)"
        LIGNE_D_ENTETE_SANS_ESPACE_DEVANT="$(echo "$LIGNE_D_ENTETE" | sed -e 's/^[[:space:]]*//' )"
        echo -e "$LIGNE_D_ENTETE_SANS_ESPACE_DEVANT"
        # Affichage état final des processus
        tableau_contenu TABLEAU_LIGNES_A_AFFICHER
    else
        :
    fi

    # Affichage message résumé réussite ou nb erreurs.
    if [ $((COMPTEUR_D_ERREUR)) -gt 0 ]
    then
        echo -e "\nERREUR : il y a eu $((COMPTEUR_D_ERREUR)) erreurs. Veuillez relire les messages ci-dessus.\n"
    else
        echo -e "\nTout est en ordre !\n"
    fi

    # Lecture optionnel de l'output de la commande avec 'less'
    REPONSE=""
    QUESTION="Souhaiteriez-vous ouvrir l'output avec 'less' ? (YyOo/Nn) "
    question_oui_non REPONSE "$QUESTION"
    if [ "$REPONSE" = "o" ]
    then
        less "$FICHIER_OUTPUT_CORBEILLE"
    else
        :
    fi
fi


