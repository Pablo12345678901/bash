#!/usr/bin/env bash

# Syntaxe :
# $1 : le path depuis lequel find effectue la recherche.

# Description du script :
# Obtention du fichier/répertoire le plus profond d'un path
# Ainsi que de son niveau absolu et relatif par rapport au répertoire/fichier de recherche
# Affichage du résumé à la fin.

: <<-"RESULTATAVECLEPATHRACINEDELORDINATEUR"
Anecdote -> voici les résultats pour le path '/' racine de l'ordinateur au 05.08.2023.
Résultats de la recherche :
Les recherches à partir du path "/" indiquent que le path le plus profond :
- possède 44 niveaux en absolu.
- possède 43 niveaux en relatif au path de recherche).
- est : "/System/Volumes/Data/Users/pablo/Desktop/Developpement/python/0_projets_avances/2_Projets/7_App_kivy_mrbeat_with_APK_v2/test-app-android_mr_beat/mrbeat/.buildozer/android/platform/build-arm64-v8a_armeabi-v7a/build/other_builds/hostpython3/desktop/hostpython3/native-build/build/temp.macosx-13.2-x86_64-3.9/Users/alejandramt/PycharmProjects/test-app-android/mrbeat/.buildozer/android/platform/build-arm64-v8a_armeabi-v7a/build/other_builds/hostpython3/desktop/hostpython3/Modules/_decimal/libmpdec/basearith.o".
RESULTATAVECLEPATHRACINEDELORDINATEUR

# Contrôle des arguments 
SYNTAXE="\nSyntaxe :\n\t$(basename $0)    FICHIER_OU_REPERTOIRE_DE_RECHERCHE\n"
if [ -z "$1" ]
then
    echo -e "\nERREUR : aucun argument fourni."
    echo -e "$SYNTAXE"
    exit 1
else
    REPERTOIRE_RECHERCHE="$1"
    if [[ -d "$REPERTOIRE_RECHERCHE" ||  -f "$REPERTOIRE_RECHERCHE" ]]
    then
        : # ok
    else
        echo -e "\nERREUR : l'argument fourni \"$REPERTOIRE_RECHERCHE\" n'est pas un fichier/répertoire."
        echo -e "$SYNTAXE"
        exit 1
    fi
fi

# Obtention du nombre de niveau absolu
CHAR_SEPARATEUR_REPERTOIRE='/' # à adapter selon l'environnement = le char qui sépare les répertoires
NIVEAU_INITIAL="$( echo "$REPERTOIRE_RECHERCHE" | awk -F "$CHAR_SEPARATEUR_REPERTOIRE" ' { print NF } ' ) "
NIVEAU_MAX_ABSOLU=$NIVEAU_INITIAL
PATH_NIVEAU_MAX="$REPERTOIRE_RECHERCHE"
NIVEAU_MAX_RELATIF=0 # Besoin pr boucler sur les niveaux
NIVEAU_MAX_RELATIF_COURANT=0
# Si le tableau contient au moins un élément

# Principe de la boucle : du moment où au moins un fichier a été trouvé à un niveau, on essaie d'aller plus loin.
FLAG_NIVEAU_SUIVANT="true"
while [ $FLAG_NIVEAU_SUIVANT = "true" ]
do
    FLAG_NIVEAU_SUIVANT="false"
    while read FICHIER_OU_REPERTOIRE
    do
        PATH_NIVEAU_MAX=$FICHIER_OU_REPERTOIRE
        NIVEAU_MAX_RELATIF=$NIVEAU_MAX_RELATIF_COURANT
        ((NIVEAU_MAX_RELATIF_COURANT++))
        # Mis à true que si au moins un match
        FLAG_NIVEAU_SUIVANT="true"
        break
    # Le niveau relatif s'adapte à chaque fois pour les recherche suivante afin de limiter les recherches au strict minimum.
    done < <(find -s "$REPERTOIRE_RECHERCHE" -mindepth $NIVEAU_MAX_RELATIF_COURANT -print0 -quit 2>/dev/null | tr '\0' '\n')
    # Envoi de STDERR vers /dev/null pour éviter les messages d'erreur = moche
    echo -e "\nNiveau max relatif actuel : $NIVEAU_MAX_RELATIF."
    echo -e "Path actuel le plus profond : \"$PATH_NIVEAU_MAX\"."
    echo -e "Tentative d'aller plus profond...\n"

done

echo "$NIVEAU_MAX_RELATIF"
echo "$PATH_NIVEAU_MAX"
NIVEAU_MAX_ABSOLU="$( echo "$PATH_NIVEAU_MAX" | awk -F "$CHAR_SEPARATEUR_REPERTOIRE" ' { print NF } ' ) "
echo "$NIVEAU_MAX_ABSOLU"

# Gestion du singulier/pluriel dans le message affiché
ACCORD_ABSOLU=""
if [ $((NIVEAU_MAX_ABSOLU)) -gt 1 ]
then
    ACCORD_ABSOLU="x"
else
    :
fi
ACCORD_RELATIF=""
if [ $((NIVEAU_MAX_RELATIF)) -gt 1 ]
then
    ACCORD_RELATIF="x"
else
    :
fi

echo -e "\nRésultats de la recherche :"
echo -e "Les recherches à partir du path \"$REPERTOIRE_RECHERCHE\" indiquent que le path le plus profond :"
echo -e "- possède $((NIVEAU_MAX_ABSOLU)) niveau${ACCORD_ABSOLU} en absolu."
echo -e "- possède $((NIVEAU_MAX_RELATIF)) niveau${ACCORD_RELATIF} en relatif au path de recherche)."
echo -e "- est : \"$PATH_NIVEAU_MAX\".\n"
