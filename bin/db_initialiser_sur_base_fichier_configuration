#!/usr/bin/env bash

source fonctions_personnelles

# Syntaxe
SYNTAXE="$(syntaxe_afficher_si_erreur "$(basename $0)" "-f FICHIER_D_INITIALISATION_SQL" )"
# Fonctionnement
# Initialise les databases depuis un fichier standard.
# Pour une création répétée de DB.
# Permet aussi de réinitialiser des DB pour les remettre à neufs pr tests.

# Contrôle des arguments
FLAG_OPTION_F= # non défini par défaut pr test après lecture des options
while getopts ':f:' OPTION # le résultat de getopts à chaque boucle est stocké dans $OPTION
do
    case $OPTION in
        f )     FLAG_OPTION_F=1
                FICHIER_D_INITIALISATION_SQL="$OPTARG"
                # Regex extension sql non-case sensititve
                REGEX_FICHIER_AVEC_EXTENSION_SQL="^.*\.(s|S)(q|Q)(l|L)$"
                # Test si $1 fourni + si fichier + si extension sql
                if [ ! -z "$FICHIER_D_INITIALISATION_SQL" ] && [ -f "$FICHIER_D_INITIALISATION_SQL" ] && [[ "$FICHIER_D_INITIALISATION_SQL" =~ $REGEX_FICHIER_AVEC_EXTENSION_SQL ]]
                then
                    :
                else
                    echo -e "\nERREUR : argument non fourni / argument n'est pas un fichier / argument ne possède pas l'extension sql.\n" >&2
                    echo -e "$SYNTAXE" >&2
                    exit 1
                fi
                ;;
        \: )    printf "\nERREUR : Argument manquant pour l'option -%s.\n" $OPTARG # les ':'' signifie que la valeur de l'argument n'a pas été trouvée = argument manquant
                printf "%b\n" "$SYNTAXE"
                exit 2
                ;;
        \? )    printf "ERREUR : Option inconnue : -%s\n" "$OPTARG"
                printf "%b\n" "$SYNTAXE"
                exit 2
                ;;
    esac
done
shift $(($OPTIND - 1)) # décalage en supprimant les options acquises

# Test si l'option F a été fourni (=test si flag défini)
if [ ! -z "$FLAG_OPTION_F" ]
then
    # Test si d'autres darguments = en trop (=test si $1 défini)
    if [ ! -z "$1" ]
    then
        printf "\nERREUR : argument(s) en trop : \"$*\".\n"
        printf "%b\n" "$SYNTAXE"
        exit 2 
    else
        : # ok
    fi
else
    printf "\nERREUR : Vous devez fournir un fichier avec l'option -f.\n"
    printf "%b\n" "$SYNTAXE"
    exit 2 
fi

# Récupération des databases existantes
DBLIST=$(mysql -e "SHOW DATABASES;" |
# mysql -e : exécute le statement puis quitte -> ici montre les databases
tail -n +2) # retire la première ligne d'entête de l'output (débute à la 2ème ligne)

# Select qui affiche les DB existante + une option de création
OPTION_CREATION="Créer DB"
select DB in $DBLIST "$OPTION_CREATION" # ajout de l'option création en fin des options
do
    # Contrôle si souhait de créer une nouvelle DB
    if [[ $DB == "$OPTION_CREATION" ]]
    then
        MESSAGE_DMD_NOM_NVLE_DB="Nom de la nouvelle db -> "
        read -p "$MESSAGE_DMD_NOM_NVLE_DB" DB rest # Conservation du premier mot en tant que DB - jette le reste
        echo "Création d'un nouvelle database $DB (si non existant uniquement)..."
        mysql -e "CREATE DATABASE IF NOT EXISTS $DB;"
    fi
    # Test si longueur du string est non-zéro
    if [ -n "$DB" ]
    then
        echo "Initialisation de la database: $DB"
        mysql $DB < "$FICHIER_D_INITIALISATION_SQL"
    fi
done