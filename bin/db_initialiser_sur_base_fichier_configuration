#!/usr/bin/env bash

source fonctions_personnelles

# Syntaxe
SYNTAXE="$(syntaxe_afficher_si_erreur "$(basename $0)" "FICHIER_D_INITIALISATION_SQL" )"
# Fonctionnement
# Initialise les databases depuis un fichier standard.
# Pour une création répétée de DB.
# Permet aussi de réinitialiser des DB pour les remettre à neufs pr tests.
 
 # Regex extension sql non-case sensititve
REGEX_FICHIER_AVEC_EXTENSION_SQL="^.*\.(s|S)(q|Q)(l|L)$"
# Test si $1 fourni + si fichier + si extension sql
if [ ! -z "$1" ] && [ -f "$1" ] && [[ "$1" =~ $REGEX_FICHIER_AVEC_EXTENSION_SQL ]]
then
    FICHIER_D_INITIALISATION_SQL="$1"
else
    echo -e "\nERREUR : argument non fourni / argument n'est pas un fichier / argument ne possède pas l'extension sql.\n" >&2
    echo -e "$SYNTAXE" >&2
    exit 1
fi

# Récupération des databases existantes
DBLIST=$(mysql -p -e "SHOW DATABASES;" |
# mysql -p : request password from tty if not provided
# mysql -e : exécute le statement puis quitte -> ici montre les databases
tail -n +2) # retire la première ligne d'entête de l'output (débute à la 2ème ligne)

# Select qui affiche les DB existante + une option de création
OPTION_CREATION="Créer DB"
select DB in $DBLIST "$OPTION_CREATION" # ajout de l'option création en fin des options
do
    # Contrôle si souhait de créer une nouvelle DB
    if [[ $DB == "$OPTION_CREATION" ]]
    then
        MESSAGE_DMD_NOM_NVLE_DB="Nom de la nouvelle db -> "
        read -p "$$MESSAGE_DMD_NOM_NVLE_DB" DB rest # Conservation du premier mot en tant que DB - jette le reste
        echo "Création d'un nouvelle database $DB (si non existant uniquement)..."
        mysql -p -e "CREATE DATABASE IF NOT EXISTS $DB;"
    fi
    # Test si longueur du string est non-zéro
    if [ -n "$DB" ]
    then
        echo "Initialisation de la database: $DB"
        mysql -p $DB < "$FICHIER_D_INITIALISATION_SQL"
    fi
done