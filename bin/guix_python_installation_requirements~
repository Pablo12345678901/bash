#!/usr/bin/env bash

source fonctions_personnelles

# Syntaxe
SYNTAXE="$(syntaxe_afficher_si_erreur "$(basename $0)" "-f FICHIER_REQUIREMENTS")"

# Note that we use "$@" to let each command-line parameter expand to a
# separate word. The quotes around "$@" are essential!
# We need TEMP as the 'eval set --' would nuke the return value of getopt.
TEMP=$(getopt --options 'f:' -q -- "$@")
# -q : quiet
# -- : marque la fin des options

# Test si la syntaxe a été correcte (options + arguments)
if [ $? -ne 0 ]
then
    STDERR_afficher_message "ERREUR de syntaxe..."
    STDERR_afficher_message "$SYNTAXE"
    exit 1
fi

# Contrôle des arguments
FLAG_OPTION_F=

# Remise des options en paramètres positionnels
eval set -- "$TEMP"
unset TEMP

while true; do
    case "$1" in
	-f )  
	    FLAG_OPTION_F=1
            FICHIER_REQUIREMENTS="$2"
            shift 2
            continue
            ;;
       	'--')
	    shift
	    break
      	    ;;
        * )
	    # Gestion des erreurs pour tout autre bug
            STDERR_afficher_message "ERREUR interne\n"
            STDERR_afficher_message "$SYNTAXE"
            exit 2
            ;;
	esac
done

# Test si les options requises ont été fournies (=test si flag défini)
if [ ! -z "$FLAG_OPTION_F" ]
then
    # Test si d'autres darguments = en trop (=test si $1 défini)
    if [ ! -z "$1" ]
    then
        STDERR_afficher_message "\nERREUR : argument(s) en trop : \"$*\".\n"
        STDERR_afficher_message "$SYNTAXE"
        exit 3
    else
        :
    fi
else
    STDERR_afficher_message "\nERREUR : Vous devez fournir toutes les options requises.\n"
    STDERR_afficher_message "$SYNTAXE"
    exit 4
fi

########## FIN GESTION ARGUMENTS/OPTIONS ####################

# Contrôle si le fichier existe - quitte sinon
if [ ! -f "$FICHIER_REQUIREMENTS" ]
then
    STDERR_afficher_message "\nERREUR : le fichier :\n\"$FICHIER_REQUIREMENTS\"\nn'est pas existant, n'est pas un fichier ou le path est erroné.\nVeuillez le contrôler.\n"
    exit 5
fi

# Contrôle si le PREFIX_PATH est défini et exit avec erreur sinon
if [ -z "$PREFIX_PATH" ]
then
 STDERR_afficher_message "\nERREUR : le fichier :\n\"$NOM_DU_FICHIER_A_RENOMMER\"\nn'est pas existant ou le path est erroné.\nVeuillez le contrôler.\n"
    exit 5
fi	

# Installation des requirements
echo -e "\nInstallation des requirements...\n"
{ cat "$FICHIER_REQUIREMENTS" |
    grep '==' |
    grep -v '^#.*' |
    cut -d '=' -f 1 |
    # installation sous le PREFIX_PATH
    xargs -n 1 pip3 install --prefix="$PREFIX_PATH" && 
    echo "Installation réussie"
} ||   { STDERR_afficher_message "\nERREUR d'installation.\nVeuillez vérifier l'output.\n" &&
         exit 10
}
