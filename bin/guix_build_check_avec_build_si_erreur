#!/usr/bin/env bash

source fonctions_personnelles

# Configuration du temps d'attente après les messages clefs
SECONDE_ATTENTE=5

# Récupération de tous les packages installés localement
declare -a LISTE_PAQUETS
LISTE_PAQUETS=(`guix package -I | # récupération des packages
		     cut -f 1 | # récupération du nom uniquement
		     sort` # tri par ordre alphabétique
		     )
declare -a LISTE_CHECK_REUSSI
declare -a LISTE_CHECK_ECHEC
declare -a LISTE_BUILD_REUSSI
declare -a LISTE_BUILD_ECHEC

# Gestion de l'avancement des paquets avec le num du paquet courant
# et nb paquets totaux
NUMERO_PAQUET_COURANT=0
NOMBRE_TOTAL_PAQUET=$(tableau_taille LISTE_PAQUETS)


# Check pour chaque paquet
for PAQUET_COURANT in "${LISTE_PAQUETS[@]}"
do
	((NUMERO_PAQUET_COURANT++))
	POURCENTAGE_AVANCEMENT="$(awk -v UP=$NUMERO_PAQUET_COURANT -v DOWN=$NOMBRE_TOTAL_PAQUET " BEGIN { print (UP*100/DOWN) } ")"
	echo -e "\n${NUMERO_PAQUET_COURANT}/${NOMBRE_TOTAL_PAQUET} = $POURCENTAGE_AVANCEMENT % - Check du paquet \"$PAQUET_COURANT\" dans $SECONDE_ATTENTE secondes...\n"
	sleep $SECONDE_ATTENTE
	guix build "$PAQUET_COURANT" --check
	# Contrôle de la valeur de retour du check
	if (($?))
	then
		# Affichage message d'erreur
		echo -e "\nERREUR avec le paquet \"$PAQUET_A_BUILD\"\n"
		
		# Rebuild du paquet qui a posé problème
		echo -e "\nRebuild du paquet \"$PAQUET_A_BUILD\" dans $SECONDE_ATTENTE secondes.\n"
		sleep $SECONDE_ATTENTE
		guix build "$PAQUET_A_BUILD"
		
		# Contrôle de la valeur de retour du build
		if (($?))
		then
			echo -e "\nERREUR : Build échoué pour le paquet \"$PAQUET_COURANT\"\n"
		 	LISTE_BUILD_ECHEC+=("$PAQUET_COURANT")
		else
			echo -e "\nREUSSITE : Build réussi pour le paquet  \"$PAQUET_COURANT\"\n"
			LISTE_BUILD_REUSSI+=("$PAQUET_COURANT")

			echo -e "\nNouvel essai du check pour le paquet \"$PAQUET_COURANT\" dans $SECONDE_ATTENTE secondes...\n"
			sleep $SECONDE_ATTENTE
			guix build "$PAQUET_COURANT" --check

			# Contrôle de la valeur de retour du check
			if (($?))
			then
				echo -e "\nERREUR : Check échoué pour le paquet \"$PAQUET_COURANT\"\n"	
				LISTE_CHECK_ECHEC+=("$PAQUET_COURANT")
			else
				echo -e "\nREUSSITE : Check réussi pour le paquet \"$PAQUET_COURANT\"\n"
				LISTE_CHECK_REUSSI+=("$PAQUET_COURANT")
			fi
		fi
	else
		echo -e "\nREUSSITE : Check réussi pour le paquet \"$PAQUET_COURANT\"\n"
		LISTE_CHECK_REUSSI+=("$PAQUET_COURANT")
	fi
done


# Affichage des résultats
FLAG_REUSSITE="true" # pour affichage final
echo "\nAffichage final des résultats dans $SECONDE_ATTENTE secondes...\n"
sleep $SECONDE_ATTENTE

TYPE="Check réussite"
TABLEAU="LISTE_CHECK_REUSSI"
if [ $(tableau_taille "$TABLEAU") -gt 0 ]
then
	echo -e "$TYPE"
	tableau_contenu "$TABLEAU"
fi

TYPE="Build réussite"
TABLEAU="LISTE_BUILD_REUSSI"
if [ $(tableau_taille "$TABLEAU") -gt 0 ]
then
	echo -e "$TYPE"
	tableau_contenu "$TABLEAU"
fi

TYPE="Build échec"
TABLEAU="LISTE_BUILD_ECHEC"
if [ $(tableau_taille "$TABLEAU") -gt 0 ]
then
	echo -e "$TYPE"
	tableau_contenu "$TABLEAU"
	FLAG_REUSSITE="false"
fi

TYPE="Check échec"
TABLEAU="LISTE_CHECK_ECHEC"
if [ $(tableau_taille "$TABLEAU") -gt 0 ]
then
	echo -e "$TYPE"
	tableau_contenu "$TABLEAU"
	FLAG_REUSSITE="false"
fi


if [ "$FLAG_REUSSITE" = "true" ]
then
	echo -e "\nRésumé : REUSSITE !\n"
	exit 0
else
	echo -e "\nRésumé : ECHEC... Veuillez contrôler les résumés finaux.\n"
	exit 1
fi


# Message de fin du script
echo -e "\nFin du check !\n"