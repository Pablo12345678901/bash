#!/usr/bin/env bash

source fonctions_personnelles

# Syntaxe
SYNTAXE="$(syntaxe_afficher_si_erreur "$(basename $0)" "-u URL_GIT_REPO")"

####### BEGINNING OF OPTION MANAGEMENT ##########

# Note that we use "$@" to let each command-line parameter expand to a
# separate word. The quotes around "$@" are essential!
# We need TEMP as the 'eval set --' would nuke the return value of getopt.
TEMP=$(getopt --options 'u:' -q -- "$@")
# -q : quiet
# -- : to explicitly show the options end

# Test whether syntax was correct (options + arguments)
if [ $? -ne 0 ]
then
    STDERR_show_message "ERROR: syntax..."
    STDERR_show_message "$SYNTAXE"
    exit 1
fi

# Arguments check
FLAG_OPTION_U=

# Re-set options through positional parameters
eval set -- "$TEMP"
unset TEMP

while true; do
    case "$1" in
	-u )  
	    FLAG_OPTION_U=1
            URL_GIT_REPO="$2"
            shift 2
            continue
            ;;
       	'--')
	    shift
	    break
      	    ;;
        * )
	    # Error management for all other bugs
            STDERR_show_message "ERROR: internal error...\n"
            STDERR_show_message "$SYNTAXE"
            exit 2
            ;;
	esac
done

# Test whether required options were provided (=test if corresponding flag is defined)
if [ ! -z "$FLAG_OPTION_U" ]
then
    # Test whether other arguments were provided = in excess (=test if $1 is defined)
    if [ ! -z "$1" ]
    then
        STDERR_show_message "\nERROR : argument(s) in excess : \"$*\".\n"
        STDERR_show_message "$SYNTAXE"
        exit 3
    else
        :
    fi
else
    STDERR_show_message "\nERROR : You must provide all required arguments.\n"
    STDERR_show_message "$SYNTAXE"
    exit 4
fi

########## END OF OPTION MANAGEMENT ####################

# Get cleaned url and new dir name
URL_GIT_REPO="${URL_GIT_REPO%/}" # remove eventual '/' at the end of url
# Get repo name
NEW_GIT_REPO="${URL_GIT_REPO##*/}" # remove all url except basename
NEW_GIT_REPO="${NEW_GIT_REPO%\.git}" # remove the '.git' at the end of url
PACKAGE_BASENAME="$NEW_GIT_REPO"

LOCATION_AT_SCRIPT_BEGINNING="$PWD"
cd "$REPERTOIRE_BUILDS_ARCHLINUX"
NEW_REPO_PATH=""

# Creation of new git repo if not existing yet
if [ ! -d "./${NEW_GIT_REPO}" ]
then
    # Creation of new git dir and error check
    { git clone "$URL_GIT_REPO" &&
      NEW_REPO_PATH="${PWD}/${NEW_GIT_REPO}" &&
    echo -e "\nNew repo created : \"$NEW_GIT_REPO\" located \"$NEW_REPO_PATH\".\n"
    } ||
    { STDERR_show_message "\nERROR : the git repo could not be created. Do it manually...\n"
    cd "$LOCATION_AT_SCRIPT_BEGINNING"
    exit 1
    }
else
    NEW_REPO_PATH="${PWD}/${NEW_GIT_REPO}"
fi

cd "$NEW_GIT_REPO"

# Test if PKGBUILD file exists in folder
PATH_PKGBUILD="$(find -maxdepth 1 -mindepth 1 -name "PKGBUILD")"

if [ -z "$PATH_PKGBUILD" ]
then
    STDERR_show_message "\nERROR : the git repo \"$NEW_GIT_REPO\" located \"$PWD\" has no 'PKGBUILD' file. Check it manually...\n"
    cd "$LOCATION_AT_SCRIPT_BEGINNING"
    exit 1
fi

# Show PKGBUILD file with less - if wished by user
USER_ANSWER=""
QUESTION_YES_NO="Would you like to check the content of the 'PKGBUILD' file
(Yy/Nn) ? "
question_oui_non USER_ANSWER "$QUESTION_YES_NO"
if [ "$USER_ANSWER" = "o" ]
then
    less "$PATH_PKGBUILD"
fi

ask_user_if_agree_to_continue

# List other file in new git dir with select loop : choice to read them with 'less' or to continue
declare -a ARRAY_OPTIONS
# Fill the array with all file at the first level of the new git dir
while read FILE_WITHIN_REPO
do
    FILE_BASENAME_OPTION="${FILE_WITHIN_REPO##*/}"
    ARRAY_OPTIONS+=("$FILE_BASENAME_OPTION")
done < <(find "$NEW_REPO_PATH" -maxdepth 1 -mindepth 1 -type f -print0 |
    tr '\0' '\n')

# Loop to ask whether to show file content or to pursue
FLAG_CONTINUE="false"
while [ ! "$FLAG_CONTINUE" = "true" ]
do

    USER_CHOICE=""
    MESSAGE_FOR_USER="Which other file would you like to check the content
?"
    STOP_OPTION="Pursue the script (if exit is wanted it will be available then)"
    select_parmi_liste ARRAY_OPTIONS USER_CHOICE "$MESSAGE_FOR_USER" "$STOP_OPTION"
    if [ "$USER_CHOICE" = "$STOP_OPTION" ]
    then
	FLAG_CONTINUE="true"
    else
	less "${NEW_REPO_PATH}/${USER_CHOICE}"
    fi
done

ask_user_if_agree_to_continue

# Then package build and installation
echo -e "\nBuild and installation...\n"
{ git pull  && 
  makepkg -s -i -r -c && 
  git clean -dfx
} ||
{ STDERR_show_message "\nERROR : the package \"$PACKAGE_BASENAME\" located \"$NEW_REPO_PATH\" could not be built. Do it manually...\n"
  cd "$LOCATION_AT_SCRIPT_BEGINNING"
  exit 1
}
  
# If no build error so showing confirmation message
echo -e "\nThe package \"$PACKAGE_BASENAME\" located \"$NEW_REPO_PATH\" was correctly built.\n"
cd "$LOCATION_AT_SCRIPT_BEGINNING"

exit 0
