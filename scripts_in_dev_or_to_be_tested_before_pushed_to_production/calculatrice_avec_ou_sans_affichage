#!/usr/bin/env bash

# Syntaxe :
# $1 : CALCUL_EN_UN_BLOC_SANS_ESPACE_ENTRE_GUILLEMETS_SIMPLES ou 'affichage' (pour un affichage détaillé du calcul)
# $2 : CALCUL_EN_UN_BLOC_SANS_ESPACE_ENTRE_GUILLEMETS_SIMPLES seulement si 'affichage' a été saisi en premier argument

# Calculatrice supportant les floats
# L'argument doit être transmis entre guillemets simples pour éviter l'erreur s'il contient des parenthèses.
# Par contre il doit y avoir un opérateur entre un nombre de une parenthèse de début
# sinon cela bug et donne des mauvais résultats sans informer l'utilisateur de l'erreur...

SYNTAXE="\nSyntaxe :\n\t$(basename $0)    'CALCUL_EN_UN_BLOC_SANS_ESPACE_ENTRE_GUILLEMETS_SIMPLES'\n"
REGEX_CONTROLE_ARGUMENT="['('')']*[-+]?[0-9]+['('')']*[-+/*]['('')']*[-+]?[0-9]+['('')']*(['('')']*[-+/*]['('')']*[-+]?[0-9]+['('')']*)*[[:space:]]"
# contrôle que la syntaxe est plus ou moins ok - ne couvre pas tous les bugs
# ['('')']* : parenthèse optionnelles pas de nb maximum
# [-+]? : signe '+' '-' optionnel (max 1x)
# [0-9]+ : nombres min 1x
# [-+/*] : opérateur 1x
if [ -z "$1" ]
then
    echo -e "$SYNTAXE"
    read -p "Quel calcul voudriez-vous effectuer ? " CALCUL_EN_UN_BLOC_SANS_ESPACE_ENTRE_GUILLEMETS_SIMPLES
    CALCUL_EN_UN_BLOC_SANS_ESPACE_ENTRE_GUILLEMETS_SIMPLES="$( echo "$CALCUL_EN_UN_BLOC_SANS_ESPACE_ENTRE_GUILLEMETS_SIMPLES" | tr -d ' ' | tr -d "'" ) "
    if [[ "$CALCUL_EN_UN_BLOC_SANS_ESPACE_ENTRE_GUILLEMETS_SIMPLES" =~ $REGEX_CONTROLE_ARGUMENT ]]
    then
        awk -v CALCUL="$CALCUL_EN_UN_BLOC_SANS_ESPACE_ENTRE_GUILLEMETS_SIMPLES" "BEGIN{ print \"Calcul : \" CALCUL \"= \" $CALCUL_EN_UN_BLOC_SANS_ESPACE_ENTRE_GUILLEMETS_SIMPLES }" ||
        { echo -e "\nERREUR dans le calcul $CALCUL_EN_UN_BLOC_SANS_ESPACE_ENTRE_GUILLEMETS_SIMPLES.\n" ; exit 1 ; }
        exit 0
    else
        echo -e "\nERREUR : argument fourni incorrect \"$CALCUL_EN_UN_BLOC_SANS_ESPACE_ENTRE_GUILLEMETS_SIMPLES\"."
        echo -e "$SYNTAXE"
        exit 1
    fi
    # Conservation du calcul pour affichage
    # suppression des espaces s'il y en a et des guillemets simples car déjà entouré de guillemets doubles
    # après avoir été lu par 'read'
    # et conservation d'un espace final pour espacer le égal du calcul
else
    :
fi

if [ "$1" == "affichage" ] # si le premier argument est "affichage"
then
    shift 1 # suppression de l'argument 'affichage'
    CALCUL_EN_UN_BLOC_SANS_ESPACE_ENTRE_GUILLEMETS_SIMPLES="$(echo "$*" | tr -d ' ') "
    if [[ "$CALCUL_EN_UN_BLOC_SANS_ESPACE_ENTRE_GUILLEMETS_SIMPLES" =~ $REGEX_CONTROLE_ARGUMENT ]]
    then
        awk -v CALCUL="$CALCUL_EN_UN_BLOC_SANS_ESPACE_ENTRE_GUILLEMETS_SIMPLES" "BEGIN{ print \"Calcul : \" CALCUL \"= \" $CALCUL_EN_UN_BLOC_SANS_ESPACE_ENTRE_GUILLEMETS_SIMPLES }" ||
        { echo -e "\nERREUR dans le calcul $CALCUL_EN_UN_BLOC_SANS_ESPACE_ENTRE_GUILLEMETS_SIMPLES.\n" ; exit 1 ; }
        exit 0
    else
        echo -e "\nERREUR : $CALCUL_EN_UN_BLOC_SANS_ESPACE_ENTRE_GUILLEMETS_SIMPLES"
        echo -e "$SYNTAXE"
        exit 1
    fi
else   
    #  sinon, fourni le résultat uniquement
    # pour utilisation dans des scripts
    CALCUL_EN_UN_BLOC_SANS_ESPACE_ENTRE_GUILLEMETS_SIMPLES="$(echo "$*" | tr -d ' ') "
    if [[ "$CALCUL_EN_UN_BLOC_SANS_ESPACE_ENTRE_GUILLEMETS_SIMPLES" =~ $REGEX_CONTROLE_ARGUMENT ]]
    then
        awk "BEGIN{ print $CALCUL_EN_UN_BLOC_SANS_ESPACE_ENTRE_GUILLEMETS_SIMPLES }" ||
        { echo -e "\nERREUR dans le calcul $CALCUL_EN_UN_BLOC_SANS_ESPACE_ENTRE_GUILLEMETS_SIMPLES.\n" ; exit 1 ; }
        exit 0
    else
        echo -e "\nERREUR : $CALCUL_EN_UN_BLOC_SANS_ESPACE_ENTRE_GUILLEMETS_SIMPLES"
        echo -e "$SYNTAXE"
        exit 1
    fi
fi
